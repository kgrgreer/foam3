p({
  "class":"foam.nanos.boot.NSpec",
  "name":"nSpecDAO",
  "serve":true,
  "authenticate": false,
  "serviceClass":"foam.dao.ProxyDAO",
  "client":
  """
    {
      "of":"foam.nanos.boot.NSpec",
      "cache":true
     }
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"AuthenticatedNSpecDAO",
  "serve":true,
  "serviceScript":"""
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setAuthorizer(new foam.nanos.auth.StandardAuthorizer("service"))
      .setInnerDAO(x.get("nSpecDAO"))
      .setOf(foam.nanos.boot.NSpec.getOwnClassInfo())
      .build();
  """,
  "client":"""
    {
      "of":"foam.nanos.boot.NSpec",
      "cache":true
    }
  """,
  documentation:"The authenticated version of nSpecDAO - for dig and docs."
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"http",
  "lazy":false,
  "service":{
    "class":"foam.nanos.jetty.HttpServer",
    "port":8080,
    "forwardedForProxyWhitelist":[],
    "welcomeFiles":["/src/foam/nanos/controller/index.html"],
    "servletMappings":[
      {
        "class":"foam.nanos.servlet.ServletMapping",
        "className":"foam.nanos.http.NanoRouter",
        "pathSpec":"/service/*"
      },
      {
        "class":"foam.nanos.servlet.ServletMapping",
        "className":"org.eclipse.jetty.servlet.DefaultServlet",
        "pathSpec":"/*",
        "initParameters":{"dirAllowed":"true","redirectWelcome":"true"}
      },
      {
        "class": "foam.nanos.servlet.ServletMapping"
        "className": "foam.nanos.servlet.ImageServlet",
        "pathSpec": "/favicon/*",
        "initParameters": {
          "paths": "/"
        }
      }
    ]
  }
})

p({"class":"foam.nanos.boot.NSpec", "name":"httprouter",                         "serviceClass":"foam.nanos.http.NanoRouter"})

p({"class":"foam.nanos.boot.NSpec", "name":"websockets",                       "lazy":false, "serviceClass":"foam.nanos.ws.NanoWebSocketServer"})


p({
  "class":"foam.nanos.boot.NSpec",
  "name":"columnConfigToPropertyConverter",
  "serve": true,
  "lazy":false,
  "serviceClass": "foam.nanos.column.ColumnConfigToPropertyConverter",
  "client": "{\"class\":\"foam.nanos.column.ColumnConfigToPropertyConverter\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "export",
  "serviceClass": "foam.nanos.export.ExportService"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "threadPool",
  "lazy": false,
  "serve": false,
  "serviceScript": `
    return new foam.nanos.pool.ThreadPoolAgency.Builder(x)
      .build();
  `
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"exportDriverRegistryDAO",
  "description": "DAO which provides a reference to data type drivers which are used to export data in various types",
  "serve":true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setAuthorize(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("exportDriverRegistrys")
      .setDecorator(new foam.dao.EnabledAwareDAO.Builder(x).setOf(foam.nanos.export.ExportDriverRegistry.getOwnClassInfo()).build())
      .setOf(foam.nanos.export.ExportDriverRegistry.getOwnClassInfo())
      .build();
  """,
  "client":"{\"of\":\"foam.nanos.export.ExportDriverRegistry\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name" :"menuDAO",
  "serve" :true,
  "authenticate": false,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setName("menu")
      .setPm(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("menus")
      .setOf(foam.nanos.menu.Menu.getOwnClassInfo())
      .setOrder(new foam.core.PropertyInfo[] {foam.nanos.menu.Menu.ORDER, foam.nanos.menu.Menu.LABEL})
      .build();
  """,
  "client": """
    {
      "of": "foam.nanos.menu.Menu",
      "order": [
        {
          "class": "__Property__",
          "forClass_": "foam.nanos.menu.Menu",
          "name": "order"
        },
        {
          "class": "__Property__",
          "forClass_": "foam.nanos.menu.Menu",
          "name": "label"
        }
      ],
      "ttlSelectPurgeTime": 0,
      "ttlPurgeTime": 0,
      "cache": true
    }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "static",
  "authenticate": false,
  "serviceClass": "foam.nanos.http.FileWebAgent"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"blobStore",
  "serviceClass":"foam.blob.BlobStore"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "httpBlobService",
  "authenticate": false,
  "serviceScript": """
    httpBlobService = new foam.nanos.blob.HttpBlobService(x, x.get("blobStore"));
    return new foam.nanos.http.SessionWebAgent("service.run.httpBlobService", httpBlobService);
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "httpFileService",
  "authenticate": false,
  "serviceScript": """
    fileService = new foam.nanos.blob.FileService(x, x.get("blobStore"));
    return new foam.nanos.http.SessionWebAgent("service.run.httpFileService", fileService);
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "file",
  "authenticate": false,
  "serviceScript": """
    fileService = new foam.nanos.http.UnauthenticatedFileService(x, "file", x.get("blobStore"));
    return new foam.nanos.http.ProxyWebAgent(fileService);
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"blobService",
  "serve":true,
  "client": """
    {
      "class":"foam.blob.RestBlobService",
      "serviceName":"service/httpBlobService"
    }
  """
})

p({"class":"foam.nanos.boot.NSpec", "name":"demoObjectDAO",                      "serve":true,  "serviceScript":"return new foam.dao.EasyDAO.Builder(x).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"demoObjects\").setGuid(true).setOf(foam.nanos.demo.DemoObject.getOwnClassInfo()).build();", "client":"{\"of\":\"foam.nanos.demo.DemoObject\", \"remoteListenerSupport\": false}"})

p({"class":"foam.nanos.boot.NSpec", "name":"twofactor",                          "serve":true,  "authenticate": false, "boxClass":"foam.nanos.auth.twofactor.OTPAuthServiceSkeleton", "serviceClass":"foam.nanos.auth.twofactor.GoogleTOTPAuthService", "client":"{\"class\":\"foam.nanos.auth.twofactor.ClientOTPAuthService\"}"})
p({
  "class":"foam.nanos.boot.NSpec",
  "name":"htmlDocDAO",
  "serve":true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setSeqNo(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setOf(foam.nanos.auth.HtmlDoc.getOwnClassInfo())
      .setJournalName("htmlDoc")
      .build();
  """,
  "client":
  """
    {
      "of":"foam.nanos.auth.HtmlDoc"
    }
  """
})
p({"class":"foam.nanos.boot.NSpec", "name":"emailDocService",                  "lazy":false, "serve":true,  "boxClass":"foam.nanos.auth.email.EmailDocInterfaceSkeleton", "serviceClass":"foam.nanos.auth.email.EmailDocService","client":"{\"class\":\"foam.nanos.auth.email.ClientEmailDocService\", \"delegate\": { \"class\":\"foam.box.HTTPBox\", \"url\":\"service/emailDocService\" } }"})
p({
  "class":"foam.nanos.boot.NSpec",
  "name":"testRunnerConfig",
  "lazy":false,
  "service": {
    "class":"foam.nanos.script.TestRunnerConfig"
  }
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"appConfig",
  "lazy":false,
  "service": {
    "class":"foam.nanos.app.AppConfig"
  }
})

p({"class":"foam.nanos.boot.NSpec","name":"appConfigService",                   "serve":true, "authenticate": false, "boxClass":"foam.nanos.app.AppConfigServiceSkeleton", "service":{"class":"foam.nanos.app.ContextLookupAppConfigService"}, "client":"{\"class\":\"foam.nanos.app.ClientAppConfigService\",\"delegate\":{\"class\":\"foam.box.HTTPBox\",\"url\":\"service/appConfigService\"}}"})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"localDocumentDAO",

  "serviceScript":
  """
  return new foam.dao.EasyDAO.Builder(x)
    .setOf(foam.flow.Document.getOwnClassInfo())
    .setInnerDAO(new foam.flow.DocumentationFolderDAO.Builder(x).build())
    .build();
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "documentDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.flow.Document.getOwnClassInfo())
      .setPermissionPrefix("flow")
      .setInnerDAO(x.get("localDocumentDAO"))
      .build();
  """,
  "client": "{\"of\":\"foam.flow.Document\"\}"
})

p({"class":"foam.nanos.boot.NSpec", "name":"serializationTestEchoService", "boxClass": "foam.nanos.test.EchoServiceSkeleton",  "serve":true, "serviceClass":"foam.nanos.test.SerializationTestEchoService", "client":"{\"class\":\"foam.nanos.test.ClientEchoService\",\"delegate\":{\"class\":\"foam.box.SessionClientBox\",\"delegate\":{\"class\":\"foam.box.HTTPBox\",\"method\":\"POST\",\"url\":\"service/serializationTestEchoService\"}}}"})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"addressParser",
  "lazy":false,
  "serve":false,
  "serviceScript": """
    return new foam.nanos.geocode.GoogleMapsAddressParser.Builder(x).build();
  """,
})
p({
  "class":"foam.nanos.boot.NSpec",
  "name":"googleMapsCredentials",
  "lazy":false,
  "serve":false,
  "service":{
    "class": "foam.nanos.geocode.GoogleMapsCredentials"
  }
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "localCurrencyDAO",
  "serve": false,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.core.Currency.getOwnClassInfo())
      .setName("currency")
      .setPm(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("currencies")
      .build()
      .addPropertyIndex(new foam.core.PropertyInfo[] {foam.core.Currency.COUNTRY});
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "currencyDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.core.Currency.getOwnClassInfo())
      .setName("currency")
      .setInnerDAO(x.get("localCurrencyDAO"))
      .build();
  """,
  "client":
  """
    {
      "of": "foam.core.Currency",
      "cache": true,
      "ttlSelectPurgeTime": 0,
      "ttlPurgeTime": 0
    }
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"googleDriveService",
  "service": {
    "class":"foam.nanos.google.api.drive.GoogleDriveService"
  },
  "documentation": "googleDriveService is used for making calls to Google Drive API"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"googleApiAuthService",
  "service": {
    "class":"foam.nanos.google.api.auth.GoogleApiAuthService"
  },
  "documentation": "googleApiAuthService configures authoriziation (sets scope of permissions which are needed to be granted by user, sets port which will be listening to response and sets folder in which tokens will be stored) and authorize Google API calls"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"googleApiCredentialsDAO",
  "serve":true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.google.api.auth.GoogleApiCredentials.getOwnClassInfo())
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("googleCredentials")
      .build();
  """,
  "client":
  """
    {
      "of":"foam.nanos.google.api.auth.GoogleApiCredentials"
    }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "googleSheetsDataExport",
  "serve": true,
  "authenticate": true,
  "boxClass": "foam.nanos.export.GoogleSheetsExportSkeleton",
  "serviceClass": "foam.nanos.google.api.sheets.GoogleSheetsApiService",
  "client":"""
    {
      "class": "foam.nanos.export.ClientGoogleSheetsExportService",
      "delegate":
        {
          "class": "foam.box.HTTPBox",
          "url": "service/googleSheetsDataExport"
        }
    }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "googleSheetsDataImport",
  "serve": true,
  "authenticate": true,
  "boxClass": "foam.nanos.google.api.sheets.views.GoogleSheetsDataImportServiceSkeleton",
  "serviceClass": "foam.nanos.google.api.sheets.views.GoogleSheetsDataImportServiceImpl",
  "client":"""
    {
      "class": "foam.nanos.google.api.sheets.views.ClientGoogleSheetsDataImportService",
      "delegate":
        {
          "class": "foam.box.HTTPBox",
          "url": "service/googleSheetsDataImport"
        }
    }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "googleSheetsTransactionsDataImport",
  "serve": true,
  "authenticate": true,
  "boxClass": "foam.nanos.google.api.sheets.views.GoogleSheetsDataImportServiceSkeleton",
  "serviceClass": "foam.nanos.google.api.sheets.views.GoogleSheetsTransactionsDataImportServiceImpl",
  "client":"""
    {
      "class": "foam.nanos.google.api.sheets.views.ClientGoogleSheetsDataImportService",
      "delegate":
        {
          "class": "foam.box.HTTPBox",
          "url": "service/googleSheetsTransactionsDataImport"
        }
    }
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"reportTemplateDAO",
  "serve":true,
  "authenticate": true,
  "serviceScript":"""
    import foam.dao.DAO;
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.export.report.Template.getOwnClassInfo())
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("reportTemplates")
      .setAuthorize(true)
      .setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer("reporttemplate"))
      .build();
  """,
  "client":
  """
    {
      \"of\":\"foam.nanos.export.report.Template\"
    }
  """
})
p({
  "class": "foam.nanos.boot.NSpec",
  "name": "userPropertyAvailabilityService",
  "serve": true,
  "authenticate": false,
  "boxClass":"foam.nanos.auth.UserPropertyAvailabilityServiceInterfaceSkeleton",
  "serviceClass": "foam.nanos.auth.UserPropertyAvailabilityService",
  "client":
    """
      {
        "class":"foam.nanos.auth.ClientUserPropertyAvailabilityService",
        "delegate": {
          "class":"foam.box.SessionClientBox",
          "delegate": {
            "class":"foam.box.HTTPBox",
            "url":
            "service/userPropertyAvailabilityService"
          }
        }
      }
    """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "counterDAO",
  "description": "A reporting count DAO being updated on other dao update",
  "serve": true,
  "serviceScript": """
    dao = new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setSeqNo(true)
      .setCreatedAware(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("counters")
      .setOf(foam.counter.Counter.getOwnClassInfo())
      .build();

    return dao;
  """,
  "client": "{\"of\":\"foam.counter.Counter\"}"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"addressConfigDAO",
  "description": "A DAO that stores address formatting for different countries",
  "serve":true,
  "serviceScript": """
    return new foam.dao.EasyDAO.Builder(x)
      .setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer("addressconfig"))
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("addressConfig")
      .setOf(foam.nanos.auth.AddressConfig.getOwnClassInfo())
      .build();
  """,
   "client":
  """
    {
      "of":"foam.nanos.auth.AddressConfig"
    }
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"approvalRequestClassificationDAO",
  "serve":true,
  "serviceScript": """
    return new foam.dao.EasyDAO.Builder(x)
      .setFuid(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("approvalRequestClassifications")
      .setOf(foam.nanos.approval.ApprovalRequestClassification.getOwnClassInfo())
      .build();
  """,
  "client": """
    {
      "of": "foam.nanos.approval.ApprovalRequestClassification"
    }
  """
})

p({
  class: "foam.nanos.boot.NSpec",
  name: "ruleRetryStrategy",
  service: {
    class: "foam.util.retry.RetryStrategyFactory",
    prototype: {
      class: "foam.util.retry.SimpleRetryStrategy",
      maxRetry: 5,
      retryDelay: 10000
    }
  }
})
