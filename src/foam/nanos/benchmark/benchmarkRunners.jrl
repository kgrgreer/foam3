p({
  class: "foam.nanos.bench.BenchmarkRunner",
  id: "AuthorizerFindBenchmarkRunner",
  description: "Benchmark Standard Authorizer can be used as a reference when benchmarking authorizers.",
  code: """
    return new foam.nanos.benchmark.AuthorizerBenchmark.Builder(x)
      .setDop(foam.dao.DOP.FIND)
      .build();
  """
})
p({
  class: "foam.nanos.bench.BenchmarkRunner",
  id: "AuthorizerPutBenchmarkRunner",
  description: "Benchmark Standard Authorizer can be used as a reference when benchmarking authorizers.",
  code: """
    return new foam.nanos.benchmark.AuthorizerBenchmark.Builder(x)
      .setDop(foam.dao.DOP.PUT)
      .build();
  """
})
p({
  class: "foam.nanos.bench.BenchmarkRunner",
  id: "AuthorizerRemoveBenchmarkRunner",
  description: "Benchmark Standard Authorizer can be used as a reference when benchmarking authorizers.",
  code: """
    return new foam.nanos.benchmark.AuthorizerBenchmark.Builder(x)
      .setDop(foam.dao.DOP.REMOVE)
      .build();
  """
})
p({
  class: "foam.nanos.bench.BenchmarkRunner",
  id: "DateFormatBenchmarkRunner",
  description: "Benchmark Date Formatting",
  benchmarkId: "DateFormatBenchmark",
  invocationCount: 10000
})
p({
  class: "foam.nanos.bench.BenchmarkRunner",
  id: "F3FileJournalBenchmarkRunner",
  benchmarkId: "F3FileJournalBenchmark"
})
p({
  class: "foam.nanos.bench.BenchmarkRunner",
  id: "F3JournalReplayBenchmarkRunner",
  benchmarkId: "F3JournalReplayBenchmark",
  invocationCount: 1
})
p({
  class: "foam.nanos.bench.BenchmarkRunner",
  id: "FUIDBenchmarkRunner",
  benchmarkId: "FUIDBenchmark"
})
p({
  class: "foam.nanos.bench.BenchmarkRunner",
  id: "FileJournalBenchmarkRunner",
  description: "Benchmark Writing to File Journal",
  benchmarkId: "FileJournalBenchmark",
  invocationCount: 100000
})
p({
  class: "foam.nanos.bench.BenchmarkRunner",
  id: "JSONFormatterBenchmarkRunner",
  benchmarkId: "JSONFormatterBenchmark",
  threadCount: 1,
  invocationCount: 100000
})
p({
  class: "foam.nanos.bench.BenchmarkRunner",
  id: "JSONOutputterBenchmarkRunner",
  benchmarkId: "JSONOutputterBenchmark",
  threadCount: 1,
  invocationCount: 100000
})
p({
  class: "foam.nanos.bench.BenchmarkRunner",
  id: "JSONOutputterEscapeBenchmarkRunner",
  description: "Benchmark JSON String escaping. Each iteration escapes 1000 strings.",
  benchmarkId: "JSONOutputterEscapeBenchmark",
  threadCount: 1,
  invocationCount: 10000
})
p({
  class: "foam.nanos.bench.BenchmarkRunner",
  id: "JSONUtilEscapeBenchmarkRunner",
  description: "Benchmark JSON String escaping. Each iteration escapes 1000 strings.",
  benchmarkId: "JSONUtilEscapeBenchmark",
  threadCount: 1,
  invocationCount: 10000
})
p({
  class: "foam.nanos.bench.BenchmarkRunner",
  id: "JournalReplayBenchmarkRunner",
  benchmarkId: "JournalReplayBenchmark",
  invocationCount: 1
})
p({
  class: "foam.nanos.bench.BenchmarkRunner",
  id: "LoggingBenchmarkRunner",
  benchmarkId: "LoggingBenchmark",
  invocationCount: 10000
})
p({
  class: "foam.nanos.bench.BenchmarkRunner",
  id: "PMBenchmarkRunner",
  benchmarkId: "PMBenchmark",
  invocationCount: 100000,
  reverseThreads: true
})
p({
  class: "foam.nanos.bench.BenchmarkRunner",
  id: "TimestampBenchmarkRunner",
  benchmarkId: "TimestampBenchmark",
  invocationCount: 10000
})
p({
  class: "foam.nanos.bench.BenchmarkRunner",
  id: "UUIDBenchmarkRunner",
  benchmarkId: "UUIDBenchmark"
})
