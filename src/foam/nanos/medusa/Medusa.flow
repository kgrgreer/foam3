<title>Medusa</title>
<h1>Medusa</h1>
<h1>Overview</h1>
Medusa is nanopay’s high availability system.  Offering fault-tolerance, data redundancy, scalability, data protection.

Why does nanopay have to implement their own high availability system?

Industry offerings are centered around traditional databases. Since nanopay employs a journal (or blockchain) for all storage, an in-house solution was required. Additionally, order-of-operations is important and it is not possible to order operations when each DAO is stored in it’s own journal.  A single ordered journal is necessary.

The Medusa system is composed of Mediators and Nodes.  Nodes are responsible for physical data persistence.  Each Node maintains a unique file based blockchain of entries it has received.  Mediators receive and execute Client requests, store the results via the Nodes, and respond to the Client when the results have been stored by a quorum (majority) of Nodes.

<h1>Setup</h1>
See deployment/cluster_1/README.txt or deployment/cluster_2/README.txt for instructions deploying a local cluster of 1+1 or 2+2.

<h1>Functional Overview</h1>
<h2>Replay</h2>
<h2>DR Sync</h2>

<h1>Implementation Overview</h1>
<h2>TODO</h2>
<ul>
<li>Index gap detection and recovery</li>
<li></li>
</ul>

<h1>Terms and Definitions</h1>
<dl>
<dt>Replay</dt>
<dd>Replay is the act of loading a journal from the filesystem into memory.  On startup the Nodes will replay once to validate their journal, and to determine the mininum and maximum index they have.  The mediators will request replay from the nodes.

A Mediator monitors for Nodes on the network and requests Replay when the Node is ONLINE.  The Node then <i>puts</i> it's entries to the Mediator
Replay is considered completed when a Mediator has reached consensus on all ledger entries from a quorum of Nodes.</dd>

<dt>Status</dt>
<dd>There are two <i>status</i> values: <b>ONLINE</b> and <b>OFFLINE</b>

A Mediator is ONLINE when Replay is complete and the electorate Primary is IN-SESSION.

A Node is ONLINE when it's initial Replay is complete.</dd>
</dl>

<h1>Viewing Data</h1>
Medusa entries can view from the Mediators.
Menu <b>Medusa Entry</b>

<h1>Mediator Failover Scenarios</h1>
Graceful and Hard Failover

<h2>Graceful</h2>

In a Gracful Failover the Primary is instructed to go OFFLINE.
Before an election is called, the Primary blocks incomming requests, allows in-flight operations to finish.

<h2>Hard (JVM dies)</h2>

When a mediator becomes Primary it blocks incomming requests and verifies the global index.

<h1>Compaction</h1>
<h2>Overview</h2>

Compaction dumps the current system out to new ledger files, in a effort to reduce replay time.  Each DAO operation on the same object generates a unique MedusaEntry containing just the change on the object.  In time there are multiple MedusaEntry's for the same object.  Compaction writes out each object in entirety once, thus reducing the multiple MedusaEntry's to just one.

<h2>Considerations</h2>
<ul>
  <li>Compaction can only be run from the Primary mediator.<li>
  <li>Compaction can be run concurrently with live traffic, but it is recommended to run compaction at a low traffic period.  Also, compaction can fail requiring system halt and manual intervention, so a Maintenance Window should be scheduled</li>
  <li>Compaction filters out many archive or history operations. See compactionDAO</li>
</ul>

Compaction is accomplished by running the script <b>Medusa Compaction</b>.
<h2>Operations</h2>
<ol>
  <li>Perform a health check to ensure all nodes and mediators are online.</li>
  <li>Start blocking new MedusaEntry DAO operations.</li>
  <li>Wait for in-flight MedusaEntry DAO operations to complete.</li>
  <li>Request each node to roll it's ledger.</li>
  <li>Request each mediator to reconfigure it's Dagger Service with the <b>next</b> pair of hashes</li>
  <li>Unblock MedusaEntry DAO operations.</li>
  <li>For each MedusaEntry, once for each object, create a new MedusaEntry with the entire current object (no delta), and write this to the nodes.</li>
  <li>Remove compacted MedusaEntry's from each Mediator</li>
</ol>