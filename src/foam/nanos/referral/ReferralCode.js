/**
 * @license
 * Copyright 2023 The FOAM Authors. All Rights Reserved.
 * http://www.apache.org/licenses/LICENSE-2.0
 */

foam.CLASS({
  package: 'foam.nanos.referral',
  name: 'ReferralCode',

  implements: [
    'foam.nanos.auth.Authorizable'
  ],

  javaImports: [
    'foam.nanos.auth.AuthService',
    'foam.nanos.auth.AuthorizationException',
    'foam.nanos.auth.Subject',
    'foam.nanos.auth.User',
    'foam.util.SafetyUtil'
  ],

  imports: [
    'appConfig'
  ],

  messages: [
    {
      name: 'LACKS_CREATE_PERMISSION',
      message: 'You do not have permission to create a referral code'
    },
    {
      name: 'LACKS_READ_PERMISSION',
      message: 'You do not have permission to read this referral code'
    },
    {
      name: 'LACKS_UPDATE_PERMISSION',
      message: 'You do not have permission to update this referral code'
    },
    {
      name: 'LACKS_REMOVE_PERMISSION',
      message: 'You do not have permission to remove this referral code'
    }
  ],

  properties: [
    {
      class: 'String',
      name: 'id',
      createVisibility: 'HIDDEN',
      updateVisibility: 'RO'
    },
    {
      class: 'Reference',
      of: 'foam.nanos.auth.ServiceProvider',
      name: 'spid',
      permissionRequired: true,
      columnPermissionRequired: true
    },
    {
      class: 'Website',
      name: 'website',
      required: true,
      factory: function() {
        return this.appConfig.url + '/?referral=';
      }
    },
    {
      class: 'Reference',
      of: 'foam.nanos.menu.Menu',
      name: 'menu',
      required: true
    },
    {
      class: 'URL',
      name: 'url',
      label: 'Referral Link',
      createVisibility: 'HIDDEN',
      updateVisibility: 'RO'
    },
    {
      class: 'Boolean',
      name: 'autoGenerated',
      value: false,
      permissionRequired: true,
      columnPermissionRequired: true,
      createVisibility: 'HIDDEN',
      updateVisibility: 'RO'
    }
  ],

  methods: [
    {
      name: 'toSummary',
      code: function() {
        return this.url + (this.autoGenerated?' (auto)':'');
      }
    },
    {
      name: 'authorizeOnCreate',
      args: [
        { name: 'x', type: 'Context' }
      ],
      javaThrows: ['AuthorizationException'],
      javaCode: `
      AuthService auth = (AuthService) x.get("auth");
      if ( ! auth.check(x, "referralCode.create") ) {
        throw new AuthorizationException(LACKS_CREATE_PERMISSION);
      }
      `
    },
    {
      name: 'authorizeOnRead',
      args: [
        { name: 'x', type: 'Context' }
      ],
      javaThrows: ['AuthorizationException'],
      javaCode: `
      AuthService auth = (AuthService) x.get("auth");
      User user = ((Subject) x.get("subject")).getUser();
      if (  user == null || ( ! auth.check(x, "referralCode.read." + getId()) && ! SafetyUtil.equals(user.getId(), getReferrer())) ) {
        throw new AuthorizationException(LACKS_READ_PERMISSION);
      }
      `
    },
    {
      name: 'authorizeOnUpdate',
      args: [
        { name: 'x', type: 'Context' },
        { name: 'oldObj', type: 'foam.core.FObject' }
      ],
      javaThrows: ['AuthorizationException'],
      javaCode: `
      AuthService auth = (AuthService) x.get("auth");
      User user = ((Subject) x.get("subject")).getUser();
      if (  user == null || ( ! auth.check(x, "referralCode.update." + getId()) && ! SafetyUtil.equals(user.getId(), getReferrer()) ) ) {
        throw new AuthorizationException(LACKS_UPDATE_PERMISSION);
      }
      `
    },
    {
      name: 'authorizeOnDelete',
      args: [
        { name: 'x', type: 'Context' }
      ],
      javaThrows: ['AuthorizationException'],
      javaCode: `
      AuthService auth = (AuthService) x.get("auth");
      if ( ! auth.check(x, "referralCode.remove." + getId()) ) {
        throw new AuthorizationException(LACKS_REMOVE_PERMISSION);
      }
      `
    }
  ]
});
