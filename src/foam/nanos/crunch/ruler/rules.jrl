p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e9-ucjdao-0",
  "name":"Check Ownership On UCJ Put",
  "priority":1000,
  "ruleGroup":"ucjDAO",
  "daoKey":"userCapabilityJunctionDAO",
  "operation":3,
  "after":false,
  "enabled":true,
  "action":{"class":"foam.nanos.crunch.ruler.CheckUCJOwnershipOnPut"},
  "lifecycleState":1,
  "documentation":"""
    On every ucjDAO put, check that the context user is permitted by a permission or
    is the source user of the ucj
  """
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"foam.nanos.crunch.authorize-ucj-status-on-put",
  "name":"Authorize UCJ Status On Put",
  "priority":950,
  "ruleGroup":"ucjDAO",
  "daoKey":"userCapabilityJunctionDAO",
  "operation":3,
  "after":false,
  "enabled":true,
  "action":{"class":"foam.nanos.crunch.ruler.AuthorizeUCJStatusOnPut"},
  "lifecycleState":1,
  "documentation":"""
    On every ucjDAO put where the ucj is in a status above ACION_REQUIRED, 
    check that the context user has the permission to set the unsafe status,
    otherwise, set the status to ACTION_REQUIRED, or fallback to the previous status,
    if applicable
  """
})

p({
  class: 'foam.nanos.ruler.Rule',
  id: 'foam.nanos.crunch.invoke-edit-behaviour',
  name: 'Invoke Edit Behaviour on Granted->Granted',
  priority: 940,
  ruleGroup: 'ucjDAO',
  daoKey: 'userCapabilityJunctionDAO',
  operation: 1,
  after: false,
  enabled: false,
  action: {
    class: 'foam.nanos.crunch.ruler.InvokeEditBehaviourRuleAction'
  },
  lifecycleState: 1,
  predicate: {
    class: 'foam.mlang.predicate.And',
    args: [
      { class: 'foam.nanos.crunch.predicate.DataChanged' },
      {
        class: 'foam.nanos.ruler.predicate.FScriptRulePredicate',
        query: 'n.status==foam.nanos.crunch.CapabilityJunctionStatus.GRANTED'
      }
    ]
  }
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e9-ucjdao-1-create",
  "name":"Validate UCJ Data On Create",
  "priority":900,
  "ruleGroup":"ucjDAO",
  "daoKey":"userCapabilityJunctionDAO",
  "operation":0,
  "after":false,
  "enabled":true,
  "action":{"class":"foam.nanos.crunch.ruler.ValidateUCJDataOnPut"},
  "lifecycleState":1,
  "documentation":"""
    On put of a new UCJ, validate the data of the ucj and set the ucj
    to ACTION_REQUIRED if the data is invalid, or PENDING if the data is valid, so that 
    subsequent rules can set the ucj to an appropiate status, or send out an approvalrequest if required
  """
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e9-ucjdao-1-update",
  "name":"Validate UCJ Data On Update",
  "priority":900,
  "ruleGroup":"ucjDAO",
  "daoKey":"userCapabilityJunctionDAO",
  "operation":1,
  "after":false,
  "enabled":true,
  "action":{"class":"foam.nanos.crunch.ruler.ValidateUCJDataOnPut"},
  "lifecycleState":1,
  "predicate":{
    "class":"foam.mlang.predicate.Or",
    "args":[
      { 
        "class":"foam.nanos.ruler.predicate.PropertyEQValue",
        "propName":"status",
        "propValue":{"class":"foam.nanos.crunch.CapabilityJunctionStatus","ordinal":3},
        "documentation":"""
          When the ucj status is in ACTION_REQUIRED its data should always be validated to try to put it
          into pending status so that subsequent rules may try to grant it.
        """
      },
      { 
        "class":"foam.mlang.predicate.And",
        "args":[
          {
            "class":"foam.nanos.ruler.predicate.PropertyEQValue",
            "propName":"isRenewable",
            "propValue":true
          },
          {
            "class":"foam.mlang.predicate.Or",
            "args":[
              {
                "class":"foam.mlang.predicate.And",
                "args":[
                  {
                    "class":"foam.nanos.ruler.predicate.PropertyEQValue",
                    "propName":"isRenewable",
                    "propValue":true,
                    "isNew":false
                  },
                  {
                    "class": "foam.mlang.predicate.Not",
                    "arg1":{
                      "class": "foam.nanos.crunch.predicate.StatusChangedTo",
                      "status": 2,
                      "checkInequality":true
                    }
                  }
                ]
              },
              {
                "class":"foam.nanos.ruler.predicate.PropertyChangePredicate",
                "propName":"data"
              }
            ]
          }
        ],
        "documentation": `
          When the ucj status is in a renewable state its data should be validated only when the data has changed
          OR if it is a reput ( i.e., old is also EXPIRED ) so that the ucj won't be re-granted right after
          changing to EXPIRED
        `
      },
      {
        "class":"foam.mlang.predicate.And",
        "args":[
          { 
            "class": "foam.nanos.ruler.predicate.PropertyChangePredicate",
            "propName":"data",
            "documentation":"Only perform data validation when the data has been updated"
          },
          {
            "class":"foam.nanos.ruler.predicate.PropertyNEQValue",
            "propName":"status",
            "propValue":{"class":"foam.nanos.crunch.CapabilityJunctionStatus","ordinal":0},
            "documentation":"""
              When the ucj is PENDING, it implies that there is an approval request pending action. 
              Thus the ucj becomes uneditable until the request is acted on by agent to avoid inconsistencies between
              the approvable obj and the ucj.
            """
          },
          {
            "class":"foam.nanos.ruler.predicate.PropertyNEQValue",
            "propName":"status",
            "propValue":{"class":"foam.nanos.crunch.CapabilityJunctionStatus","ordinal":6},
            "documentation":"""
              When the ucj is PENDING, it implies that there is an approval request pending action. 
              Thus the ucj becomes uneditable until the request is acted on by agent to avoid inconsistencies between
              the approvable obj and the ucj.
            """
          }
        ]
      }
    ]
  },
  "documentation":"""
    On update of an UCJ, if the ucj is in the status ACTION_REQUIRED, or if the data of the ucj
    has changed and the ucj is NOT in PENDING or APPROVED, try to validate the data of the ucj.
  """
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e9-ucjdao-2",
  "name":"Set UCJ Status On Put",
  "priority":800,
  "ruleGroup":"ucjDAO",
  "daoKey":"userCapabilityJunctionDAO",
  "operation":3,
  "after":false,
  "enabled":true,
  "action":{"class":"foam.nanos.crunch.ruler.SetUCJStatusOnPut"},
  "lifecycleState":1,
  "documentation":"""
    On every ucjDAO put, set the appropriate status based on the capability, 
    current state of the ucj, as well as the state of its prerequisites.
    Note: this rule is only ran if ucj is GRANTED, APPROVED, and PENDING
  """
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e9-ucjdao-3",
  "name":"Configure UCJ Expiry On Granted - Create",
  "priority":700,
  "ruleGroup":"ucjDAO",
  "daoKey":"userCapabilityJunctionDAO",
  "operation":3,
  "after":false,
  "enabled":true,
  predicate: {
    class: 'foam.nanos.ruler.predicate.FScriptRulePredicate',
    query: '( o !exists || o.status != n.status ) && n.status == foam.nanos.crunch.CapabilityJunctionStatus.GRANTED'
  },
  "action":{"class":"foam.nanos.crunch.ruler.ConfigureUCJExpiryOnGranted"},
  "lifecycleState":1,
  "documentation":"""
    On put of a new UCJ that has been GRANTED, configure the expiry info of the
    ucj based on the duration and expiry properties of the target capability
    On update of a UCJ, if the ucj data has been updated or if the ucj underwent a status change to GRANTED
    configure the expiry info based on the duration and expiry properties of the target capability
    this check is implemented in the ruleaction due to updating of the renewal status no occuring
    at the time the predicate is checked
  """
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e9-ucjdao-4",
  "name":"Save UCJ Data On Granted - create or update",
  "priority":600,
  "ruleGroup":"ucjDAO",
  "daoKey":"userCapabilityJunctionDAO",
  "operation":3,
  "after":false,
  "enabled":true,
  "action": {
    "class":"foam.nanos.crunch.ruler.SaveUCJDataOnGranted"
  },
  "lifecycleState":1,
  "documentation":"""
    Save UCJ 'data' to DAO when:
    * On create of UCJ in GRANTED state.
    * On update of UCJ data, now in GRANTED state.
    DAO is specified by the target capability daoKey or contextDAOFindKey.
    NOTE: The check for GRANTED state is in the rule action as change to
    GRANTED may occur in rule SetUCJStatusOnPut. This dependeny exists
    because the two rules are in the same ruleGroup, and the predicates
    are tested before applying any rules.
  """
})

// rule to be re-ran if a non-core ucj rule moves the ucj to APPROVED status
p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e9-crunch2-after",
  "name":"Reput Dependents Rule - on create or update with status change",
  "priority":1,
  "ruleGroup":"ucjDAO",
  "daoKey":"userCapabilityJunctionDAO",
  "operation":3,
  "after":true,
  "enabled":true,
  predicate:{
    class: "foam.nanos.ruler.predicate.FScriptRulePredicate",
    query: "o !exists || o.status != n.status || o.isInRenewable != n.isInRenewable"
  },
  "action":{"class":"foam.nanos.crunch.ReputDependentUCJs"},
  "lifecycleState":1,
  "documentation":"""
find the dependent capabilities of this ucj that the user has a junction with and reput them in order to update the status appropriately
  """
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e9-ucjdao-2-after",
  "name":"Set UCJ Status On Put - after",
  "priority":800,
  "ruleGroup":"ucjDAOAfter",
  "daoKey":"userCapabilityJunctionDAO",
  "operation":3,
  "after":true,
  "enabled":true,
  predicate: {
    class: 'foam.nanos.ruler.predicate.FScriptRulePredicate',
    query: '( o !exists || o.status != n.status ) && n.status == foam.nanos.crunch.CapabilityJunctionStatus.APPROVED'
  },
  "action":{"class":"foam.nanos.crunch.ruler.SetUCJStatusOnPut"},
  "lifecycleState":1,
  "documentation":"""
  If status change to APPROVED, go through the setUcjStatus again
  so it can be transitioned to GRANTED without having to do an explicit reput to the ucjDAO
  """
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e9-ucjdao-3-after",
  "name":"Configure UCJ Expiry On Granted - after",
  "priority":700,
  "ruleGroup":"ucjDAOAfter",
  "daoKey":"userCapabilityJunctionDAO",
  "operation":3,
  "after":true,
  "enabled":true,
  predicate: {
    class: 'foam.nanos.ruler.predicate.FScriptRulePredicate',
    query: 'o.status != n.status && n.status == foam.nanos.crunch.CapabilityJunctionStatus.GRANTED'
  },
  "action":{"class":"foam.nanos.crunch.ruler.ConfigureUCJExpiryOnGranted"},
  "lifecycleState":1,
  "documentation":"""
  Check if ucj has been set to granted after going through other non-ucjDAO rules and configure
  the expiry if needed
  """
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e9-ucjdao-4-after",
  "name":"Save UCJ Data On Granted - after",
  "priority":600,
  "ruleGroup":"ucjDAOAfter",
  "daoKey":"userCapabilityJunctionDAO",
  "operation":3,
  "after":true,
  "enabled":true,
  predicate: {
    class: 'foam.nanos.ruler.predicate.FScriptRulePredicate',
    query: '(o !exists || o.status != n.status) && n.status == foam.nanos.crunch.CapabilityJunctionStatus.GRANTED'
  },
  "action":{"class":"foam.nanos.crunch.ruler.SaveUCJDataOnGranted"},
  "lifecycleState":1,
  "documentation":"""
  Check if ucj has been set to granted after going through other non-ucjDAO rules and save the
  ucj data if needed
  """
})
