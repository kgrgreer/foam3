p({
  "class": "foam.nanos.boot.NSpec",
  "name": "themeDAO",
  "description": "Stores Themes, which are used to style the application.",
  "serve": true,
  "authenticate": false,
  "serviceScript": """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.theme.Theme.getOwnClassInfo())
      .setGuid(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("themes")
      .setDecorator(new foam.nanos.theme.ThemeDomainsDAO.Builder(x).setDelegate(new foam.dao.NullDAO(x, foam.nanos.theme.Theme.getOwnClassInfo())).build())
      .setPm(true)
      .setServiceProviderAware(false)
      .setPermissioned(true)
      .build()
      .addPropertyIndex(new foam.core.PropertyInfo[] {foam.nanos.theme.Theme.NAME, foam.nanos.auth.GroupPermissionJunction.TARGET_ID});
  """,
  "client": "{\"of\":\"foam.nanos.theme.Theme\"}",
  "authNotes": "Needs to be unauthenticated because we need to be able to theme apps before the user has logged in. However, we still need to restrict write access, which we do via an AuthorizationDAO."
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "themeDomainCapabilityJunctionDAO",
  "serve": true,
  "authenticate": false,
  "serviceScript": """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.theme.ThemeDomainCapabilityJunction.getOwnClassInfo())
      .setGuid(true)
      .setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer("themedomaincapabilityjunction"))
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("themeDomainCapabilityJunctions")
      .setPm(true)
      .build()
  """,
  "client": "{\"of\":\"foam.nanos.theme.ThemeDomainCapabilityJunction\"}",
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "spThemeDAO",
  "description": "Access to Themes specific to Service Provider",
  "serve": true,
  "serviceScript": """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.theme.Theme.getOwnClassInfo())
      .setInnerDAO(x.get("themeDAO"))
      .setServiceProviderAware(true)
      .build();
  """,
  "client": "{\"of\":\"foam.nanos.theme.Theme\"}",
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "themeDomainDAO",
  "description": "Provides domain lookup for Themes",
  "serve": true,
  "authenticate": false,
  "serviceScript": """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.theme.ThemeDomain.getOwnClassInfo())
      .setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer("themedomain"))
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("themeDomains")
      .setPm(true)
      .build()
  """,
  "client": "{\"of\":\"foam.nanos.theme.ThemeDomain\"}",
  "authNotes": "Needs to be unauthenticated because we need to be able to theme apps before the user has logged in. However, we still need to restrict write access, which we do via an AuthorizationDAO."
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "themes",
  "serve": false,
  "serviceClass": "foam.nanos.theme.Themes",
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"cssTokenOverrideService",
  "serve":true,
  "lazyClient": false,
  "authenticate":false,
  "client":"{ \"class\": \"foam.nanos.theme.customisation.CSSTokenOverrideService\" }"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"cssTokenOverrideDAO",
  "description":"Theme CSS Token Override DAO",
  "serve":true,
  "authenticate":false,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer("csstokenoverride"))
      .setJournalName("cssTokenOverrides")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setOf(foam.nanos.theme.customisation.CSSTokenOverride.getOwnClassInfo())
      .build()
  """,
  "client":
  """
    {
      "of":"foam.nanos.theme.customisation.CSSTokenOverride"
    }
  """
})
