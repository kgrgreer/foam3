p({
  "class":"foam.nanos.boot.NSpec",
  "name":"ticketHistoryDAO",
  "serve":true,
  "serviceScript":"""
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.dao.history.HistoryRecord.getOwnClassInfo())
      .setSeqNo(true)
      .setSeqPropertyName("seqNo")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("ticketHistory")
      .build();
    """,
  "client":"""
    {"of":"foam.dao.history.HistoryRecord"}
    """
})
p({
  "class": "foam.nanos.boot.NSpec",
  "name": "localTicketDAO",
  "lazy": true,
  "serve": false,
  "serviceScript": """
    dao = new foam.dao.NullDAO.Builder(x).setOf(foam.nanos.ticket.Ticket.getOwnClassInfo()).build();
    dao = new foam.nanos.ticket.TicketOwnerDAO.Builder(x).setDelegate(dao).build();
    dao = new foam.nanos.ticket.TicketAddCommentDAO.Builder(x).setDelegate(dao).build();
    dao = new foam.dao.history.HistoryDAO(x, "ticketHistoryDAO", dao);
    dao = new foam.nanos.ticket.CloseTicketCommandDAO.Builder(x).setDelegate(dao).build();

    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.ticket.Ticket.getOwnClassInfo())
      .setAuthorize(false)
      .setPm(true)
      .setFuid(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("tickets")
      .setOrder(new foam.mlang.order.Comparator[] {
        foam.mlang.MLang.DESC(
          foam.nanos.ticket.Ticket.LAST_MODIFIED
        )
      })
      .setDecorator(dao)
      .setServiceProviderAware(true)
      .setServiceProviderAwarePropertyInfos(
        new java.util.HashMap() {{
          put(
            foam.nanos.ticket.Ticket.class.getName(),
            new foam.core.PropertyInfo[] {
              foam.nanos.ticket.Ticket.OWNER
            }
          );
        }}
      )
      .build();
  """
})
p({
  "class": "foam.nanos.boot.NSpec",
  "name": "ticketDAO",
  "lazy": true,
  "serve": true,
  "serviceScript": """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.ticket.Ticket.getOwnClassInfo())
      .setAuthorize(true)
      .setEnableInterfaceDecorators(false)
      .setInnerDAO((foam.dao.DAO) x.get("localTicketDAO"))
      .build()
      .addPropertyIndex(new foam.core.PropertyInfo[] {foam.nanos.ticket.Ticket.ID});
      .addPropertyIndex(new foam.core.PropertyInfo[] {foam.nanos.ticket.Ticket.TYPE});
      .addPropertyIndex(new foam.core.PropertyInfo[] {foam.nanos.ticket.Ticket.ASSIGNED_TO_SUMMARY});
      .addPropertyIndex(new foam.core.PropertyInfo[] {foam.nanos.ticket.Ticket.LAST_MODIFIED});
      .addPropertyIndex(new foam.core.PropertyInfo[] {foam.nanos.ticket.Ticket.STATUS}); 
      .addPropertyIndex(new foam.core.PropertyInfo[] {foam.nanos.ticket.Ticket.TITLE}); 
  """,
  "client":
  """
  {
    "of": "foam.nanos.ticket.Ticket",
    "cache": false,
    "decorators": [
      {
        "class":"foam.nanos.fs.FileArrayDAODecorator"
      }
    ]
  }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "localTicketStatusDAO",
  "lazy": true,
  "serve": false,
  "serviceScript": """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.ticket.TicketStatus.getOwnClassInfo())
      .setAuthorize(false)
      .setPm(true)
      .setSeqNo(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("ticketStatuses")
      .setOrder(new foam.mlang.order.Comparator[] {
          foam.nanos.ticket.TicketStatus.ORDINAL
      })
      .build();
  """
})
p({
  "class": "foam.nanos.boot.NSpec",
  "name": "ticketStatusDAO",
  "lazy": true,
  "serve": true,
  "serviceScript": """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.ticket.TicketStatus.getOwnClassInfo())
      .setAuthorize(true)
      .setEnableInterfaceDecorators(false)
      .setInnerDAO((foam.dao.DAO) x.get("localTicketStatusDAO"))
      .build();
  """,
  "client": "{\"of\":\"foam.nanos.ticket.TicketStatus\"}"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"ticketCommentHistoryDAO",
  "serve":true,
  "serviceScript":"""
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.dao.history.HistoryRecord.getOwnClassInfo())
      .setSeqNo(true)
      .setSeqPropertyName("seqNo")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("ticketCommentHistory")
      .build();
    """,
  "client":"""
    {"of":"foam.dao.history.HistoryRecord"}
    """
})
p({
  "class": "foam.nanos.boot.NSpec",
  "name": "localTicketCommentDAO",
  "lazy": true,
  "serve": false,
  "serviceScript": """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.ticket.TicketComment.getOwnClassInfo())
      .setAuthorize(false)
      .setPm(true)
      .setSeqNo(true)
      .setOrder(new foam.mlang.order.Comparator[] {
        foam.mlang.MLang.DESC(
          foam.nanos.ticket.TicketComment.CREATED
        )
      })
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("ticketComments")
      .setDecorator(
        new foam.dao.history.HistoryDAO(x, "ticketCommentHistoryDAO",
          new foam.nanos.ticket.TicketCommentOwnerDAO.Builder(x).setDelegate(
            new foam.dao.NullDAO.Builder(x).setOf(foam.nanos.ticket.TicketComment.getOwnClassInfo()).build()).build())
      )
      .build();
  """
})
p({
  "class": "foam.nanos.boot.NSpec",
  "name": "ticketCommentDAO",
  "lazy": true,
  "serve": true,
  "serviceScript": """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.ticket.TicketComment.getOwnClassInfo())
      .setAuthorize(true)
      .setEnableInterfaceDecorators(false)
      .setInnerDAO((foam.dao.DAO) x.get("localTicketCommentDAO"))
      .build();
  """,
  "client": "{\"of\":\"foam.nanos.ticket.TicketComment\"}"
})
