<title>Modular Wizard Documentation</title>

<h1>Wizardlet Models</h1>

<h2>Wizardlet</h2>

A wizardlet is an independent portion of a wizard. It describes its data, views,
and how it's saved and loaded. Wizardlets can be visible, allowing a user to
fill in their data; or invisible, providing hidden functionality for saving or
acting on wizard events.

Every wizardlet has a property `of` which specifies a model containing data a
user needs to enter into the wizard (which will be instantiated as `data`).
The `of` property may also be null to indicate that this wizardlet doesn't have
any data to enter. (although, the wizardlet may still appear if the `sections`
property is overridden to display a custom view)

<foam class="foam.flow.widgets.TabbedModelDocumentation" defaultTab="methods" of="foam.u2.wizard.Wizardlet" />

<h2>WizardletSection</h2>

Wizardlets are sectioned. By default, a wizardlet will contain WizardletSection
instances derived from 'of's section axioms. The abstraction of WizardletSection
allows adding custom views to a wizardlet independently from the data model.

The MinMaxCapabilityWizardlet is an example where a custom WizardletSection is
used to display a selection of choices.

<foam class="foam.flow.widgets.TabbedModelDocumentation" defaultTab="properties" of="foam.u2.wizard.WizardletSection" />

<h1>Wizards</h1>

Wizards are created by combining StepWizardController with a compatible view.
An instance of StepWizardController should be the value of the view's data
property.

<h2>StepWizardController</h2>

StepWizardController implements the behaviour for a wizard. It creates listeners
on all wizardlets to provide status properties like 'allValid' and
'visitedWizardlets'. It also contains logic for skippiing unavailable wizardlets
and moving the position backwards if a previous wizardlet becomes available.

The following properties are useful to initialize when creating the controller:
<foam class="foam.flow.widgets.PropertyShortSummary" of="foam.u2.wizard.StepWizardController" whitelist="['wizardlets', 'config', 'wizardPosition']" />

<h2>IncrementalStepWizardView</h2>

This is a view for StepWizardController implementing a "page by page" approach
wizard navigation. Each section will be seen on a separate screen, and the user
must click "next" to reach the next screen. Requiring the user to click next
allows control over how they proceed, as they must provide valid data before
continuing.

<h2>ScrollingStepWizardView</h2>

This is a view for StepWizardController implementing a single scrolling view
containing all sections. This allows a user to fill in sections in any order
they choose, making it ideal for cases where a user might not have all the
requirement information immediately.

<h2>StepWizardConfig</h2>

This is the model used for the 'config' property of StepWizardController.
<foam class="foam.flow.widgets.PropertyShortSummary" of="foam.u2.wizard.StepWizardConfig" />

<h1>Wizardlet Save Logic</h1>

<h2>Overview</h2>

Possibly the most complex logic in the wizard is when and how wizardlets are
saved. The wizardlet interface defines a `save` method which wizardlet
subclasses are expected to implement, the most common case being
CapabilityWizardlet which saves the data using CrunchService.

<h2>Auto-Save</h2>

<p>
  Auto-save is currently the primary way wizardlets get saved in lieu of a close
  action. The feature consists of the following components:

  <ul>
    <li>AutoSaveWizardletsAgent</li>
    <li>WizardletAutoSaveSlot</li>
    <li>FObjectRecursionSlot</li>
    <li>Any implementation of `getDataUpdateSub` on wizardlets</li>
  </ul>
</p>

<p>
  <b>AutoSaveWizardletsAgent</b> is a context agent that can be added to a wizard
  sequence, such as `createWizardSequence` defined in CrunchController. This
  context agent calls getDataUpdateSub on each wizardlet to get a slot, and
  attaches a listener to each slot that saves the corresponding wizardlet.
</p>

<p>
  <b>FObjectRecursionSlot</b> makes it possible to listen for property changes
  on an FObject, as well as properties of any nested FObject recursively. This
  is used to detect changes in a wizardlet's `data` object so that a save can
  be invoked. While FObjectRecursionSlot's behaviour is simple, the code is
  complex because it must avoid circular references, and ignore certain types
  of properties such as DAOProperty which are not useful to detect user-caused
  changes.
</p>

<p>
  <b>WizardletAutoSaveSlot</b> wraps FObjectRecursionSlot to prevent frequent
  saves. Unlike a merged listener, which may not save after the most recent
  change, a series of updates in quick succession will push the invocation of
  saving away until a specified delay has occurred since the last update.
</p>

<p>
  The <b>getDataUpdateSub</b> on BaseWizardlet sets up the general case of a
  WizardletAutoSaveSlot wrapping an FObjectRecursionSlot. If the data model
  of a wizardlet implements WizardletAware and defines a method called
  customUpdateSlot, then that slot will be fed into WizardletAutoSaveSlot.
  This can be useful when it's known that only a single property will be
  updated by a user.
</p>

<h2>Triggered Save</h2>

<p>
  When a data model implements WizardletAware, it can implement a method called
  `installInWizardlet`. This method is called and passed the Wizardlet instance
  after the instance of the data model is set on the wizardlet's `data`
  property. At this point the data model has access to the wizardlet and can
  invoke the save method manually. When the wizardlet is saved this way, and no
  parameters are passed to `wizardlet.save`, this is called a triggered save.
  The most important difference between this and an auto save is that user input
  will be blocked until a response is recieved from the server. This gives the
  server an opportunity to update properties on the data model to provide
  important feedback to a user.
</p>

<h2>Final Save</h2>

<p>
  Final save is done by a context agent that appears in the wizard sequence
  after StepWizardAgent, called SaveAllAgent. This is typically surrounded
  by SpinnerAgent and DetachSpinnerAgent so that a fullscreen spinner can be
  displayed after the wizard is closed and until the final save is complete.
  The final save is not always necessary but works as a failsafe in case the
  user closes the wizard before an auto-save is completed, or if for any other
  reason (for example, due to an exception that was thrown) the auto-save
  functionality fails.
</p>

<h2>Incremental Save</h2>

<p>
  Incremental saving used to be supported, but is currently not available. When
  using IncrementalStepWizardView the next button would also trigger a save on
  the current wizardlet before moving to the next one. If this ever needs to be
  re-enabled it is possible to do by calling `saveProgress` on
  StepWizardController whenever the wizard position is about to change, but it
  should be verified that the `visitedWizardlets` property is still being updated
  accurately.
</p>
