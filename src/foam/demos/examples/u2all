## U2
##  All U2 Features
An example which shows all (most) U2 features.
--
foam.CLASS({
  name: 'SimpleUser',

  // If not specified, all properties will be included in tableViews,
  // except those with hidden: true.
  // But if we also don't want to display 'age', then we can change the tableColumns
  tableColumns: [
    'id', 'firstName', 'lastName'
  ],

  properties: [
    { class: 'Int',      name: 'id' },
    { class: 'String',   name: 'firstName' },
    { class: 'String',   name: 'lastName' },
    { class: 'Int',      name: 'age' , min: 0, max: 140, units: 'years'},
    // hidden: true means we don't want to display this property in Detail or Table Views
    { class: 'Password', name: 'password', hidden: true }
  ],

  methods: [
    function toSummary() {
      return this.id + ' ' + this.firstName + ' ' + this.lastName;
    }
  ],

  actions: [
    function haveBirthday() { this.age++; }
  ]
});


foam.CLASS({
  name: 'AllFeatures',
  extends: 'foam.u2.Controller', // exports self as 'data'

  // Other options:
  // extends: 'foam.u2.Element', // inherits 'data' or sets with setContext()
  // extends: 'foam.u2.View',    // has a 'data' property

  requires: [ 'foam.dao.EasyDAO' ],

  css: `
    ^ {
      border: 1px solid black;
      padding: 4px;
    }

    ^pinkish {
      background: pink;
    }

    ^important {
      font-weigth: 800;
      color: red;
    }

    .greenish {
      background: lightgreen;
    }

    .foam-u2-DetailView {
      display: contents;
      float: left;
      width: 800px;
    }

    h2 {
      margin-top: 60px;
    }
  `,

  properties: [
    { class: 'String',  name: 'stringField', value: 'Testing' },
    { class: 'Int',     name: 'intField',  value: 5  },
    { class: 'Date',    name: 'dateField' },
    { class: 'Boolean', name: 'flag' },
    'namedView',
    {
      class: 'FObjectProperty',
      of: 'SimpleUser',
      name: 'user',
      factory: function() {
        return SimpleUser.create({
          id: 1,
          firstName: 'Sergey',
          lastName: 'Bubka',
          age: 58
          });
      }
    },
    {
      class: 'foam.dao.DAOProperty', // Note package is required
      name: 'users',
      factory: function() {
        return this.EasyDAO.create({
          of: SimpleUser,
          seqNo: true,
          cache: true,
          daoType: 'LOCAL',
          testData: [
            { firstName: 'John', lastName: 'Doe',   age: 42, password: 'secret1' },
            { firstName: 'Jane', lastName: 'Doe',   age: 24, password: 'secret1' },
            { firstName: 'John', lastName: 'Smith', age: 18, password: 'secret1' },
            { firstName: 'Jane', lastName: 'Smith', age: 26, password: 'secret1' }
          ]
        });
      }
    },
    {
      class: 'String',
      name: 'readWrite',
      value: 'testing...',
      visibility: 'RW'
    },
    {
      class: 'String',
      name: 'readOnly',
      value: 'testing...',
      visibility: 'RO'
    },
    {
      class: 'String',
      name: 'disabled',
      value: 'testing...',
      visibility: 'DISABLED'
    },
    {
      class: 'String',
      name: 'hidden',
      value: 'testing...',
      visibility: 'HIDDEN'
    },
    {
      class: 'String',
      name: 'maybeDisabled',
      value: 'testing...',
      visibility: function(flag) {
        return flag ? foam.u2.DisplayMode.DISABLED : foam.u2.DisplayMode.RW;
      }
    },
    {
      class: 'String',
      name: 'maybeHidden',
      value: 'testing...',
      visibility: function(flag) {
        return flag ? foam.u2.DisplayMode.HIDDEN : foam.u2.DisplayMode.RW;
      }
    }
  ],

  methods: [
    // render() is where your views DOM is built / rendered
    function render() {
      var self = this; // Needed in some inner functions

      this.
      // This will match the ^ { ... } CSS rule above.
      addClass(this.myClass()).
      start('div').
        start('h2').add('ID').end().
        start('div', {id: 123}).
          add('Inspect Element to See my ID.').
        end().
        // All elements have a uniquely assigned id in U2, but not U3
        start().add('or mine').end().
        start().add('or mine').end().

        start('h2').add('Add').end().
        add('one value at a time').
        br().
        add('or ', 'multiple ', 'values ', 'all ', 'at ', 'once').
        br().
        add('Escaped: <script>doSomethingBad();</script><img src="someplaceBad">').
        br().
        add(1, ' ', 3.14, ' ', true, ' ', false).
        br().
        add([1,2,3,4,5]).
        br().
        add(Promise.resolve('A resolved promise')).
        br().
        add('A non-breaking space (&nbsp;) here ->').nbsp().add('<-').

        start('h2').add('Start / Tag').end().
        start('b').add('bold text').end().
        br().
        add('Text Field: ').start({class: 'foam.u2.TextField'}).end().
        add('CheckBox: ').tag({class: 'foam.u2.CheckBox'}).
        br().
        // Create a named view, so we can access it later
        start('textarea', {}, this.namedView$).add('Dynamic Content in named view.\n').attrs({cols:80, rows:10}).end().
        br().
        add(this.ADD_CONTENT_TO_VIEW, ' ', this.REMOVE_CONTENT).

        start('h2').add('Events').end().
        start('u').on('click', () => alert('inline listener')).add('inline listener').end().
        add(', ').
        start('u').on('click', this.onClick).add('named listener').end().

        start('h2').add('CSS').end().
        start().
          style({width: '600px'}).
          start().
            addClass(this.myClass('pinkish')).
            add('A scoped styled pink section.').
          end().
          start().
            addClass('greenish').
            add('An unscoped styled green section.').
          end().
          start().
            style({background: 'lightblue'}).
            add('An inline styled blue section.').
          end().
          start().
            enableClass(this.myClass('important'), this.flag$).
            add('Toggle flag to add ^important CSS class.').
          end().
          start().
            style({background: this.flag$.map(f => f ? 'black' : 'red')}).
            add('Add style dynamically from a slotl').
          end().
          add(this.FLIP).
        end().

        start('h2').add('Attributes').end().
        start('img').attr('src', '../u2/Dragon.png').end().
        br().
        start('img').attrs({src: '../u2/Dragon.png', width: 60, height: 60}).end().
        start('h3').add('Dynamic Attributes').end().
        start('img').attrs({src: '../u2/Dragon.png', width: this.flag$.map(f => f ? 40 : 80), height: this.flag$.map(f => f ? 40 : 80)}).end().
        br().
        add(this.FLIP).

        start('h2').add('Tooltip').end().
        start('div', {tooltip: 'My tooltip'}).
          add('Hover for Tooltip!').
        end().

        start('h2').add('Conditionals').end().
        add('Flag: ', this.FLAG, ' ', this.FLAG.__, ' ', this.FLIP).
        br().add(this.flag$).br().
        start().show(this.flag$).add('show if flag is true').end().
        start().hide(this.flag$).add('hide if flag is true').end().
        callIf(this.flag, function() {
          this.add('Added if flag is true');
        }).
        callIfElse(this.flag, function() {
          this.add('Added if(else) flag is true');
        },
        function() {
          this.add('Added if(else) flag is false');
        }).
        add(this.flag$.map(function (f) {
          // Note: Use self.E() instead of this.E() because 'this' is the slot
          return f ?
            self.E().add('Added dynamically if true') :
            self.E().add('Added dynamically if false');
        })).

        start('h2').add('Looping').end().
        start('div').
          repeat(1, 10, function(i) { this.add(i, ' '); }).
        end().
        start('div').
          repeat(10, 1, function(i) { this.add(i, ' '); }, true).
        end().
        start('ol').
          // Note: You must use 'function' rather than '=>' syntax to get proper 'this' binding
          // You can just use call() and then use any kind of JS loop: for, while, do/while, forEach, etc.
          call(function() {
            for ( var i = 1 ; i <= 5 ; i++ )
              this.start('li').add('Item ' + i).end();
          }).
        end().
        start('ul').
          // Note: You must use 'function' rather than '=>' syntax to get proper 'this' binding
          forEach(['apple', 'banana', 'organge'], function(fruit) {
            this.start('li').add(fruit).end();
          }).
        end().
        start().
          select(this.users, function(user) {
            // this.start().         // U3 Version
            return this.E().start(). // U2 Version
              add(user.id, ' ', user.firstName, ' ', user.lastName, ' age: ', user.age).
            end();
          }).
        end().
        br().
        add('Stars: ').tag({class: foam.u2.RangeView, minValue: 1, maxValue: 5, data$: this.intField$}).
        tag(this.intField$.map(function (count) {
          return self.E('b').style({color: 'gold'}).repeat(1, count, function() { this.add(' â˜… '); });
        })).

        start('h2').add('onKey').end().
        add('value: ').add(this.stringField$).br().
        add('OnKey: false - ').tag(this.STRING_FIELD).
        add('OnKey: true - ').tag(this.STRING_FIELD, {onKey: true}).

        start('h2').add('Actions').end().
        add(this.FLAG.__).
        add(this.FLIP, this.ENABLE, this.DISABLE).

        start('h2').add('Properties').end().
        // There are 4 levels/ways of adding a property value to your DOM:
        // just the current value, but doesn't update
         add('Value: ', this.stringField).
        tag('p').
        // the current value, but updates if the value changes
        add('Slot: ', this.stringField$).
        tag('p').
        // a view for editing the value
        add('View: ', this.STRING_FIELD).
        tag('p').
        // a view with extra features provided by PropertyBorder, like label, validation text, etc.
        add('View with PropertyBorder: ', this.STRING_FIELD.__).
        tag('p').

        start('h2').add('startContext() / endContext() / Property Binding').end().
        // Since this class is a Controller, and exports itself as 'data', we can bind its
        // own properties easily:
        add(this.STRING_FIELD, this.INT_FIELD, this.DATE_FIELD, this.FLAG).
        // Or, wrap the views in PropertyBorders to add extra functionality:
        add(this.STRING_FIELD.__, this.INT_FIELD.__, this.DATE_FIELD.__, this.FLAG.__).
        // Or, get the advantages of a PropertyBorder but change the default View
        tag(this.INT_FIELD.__, { config: { view: { class: 'foam.u2.RangeView', minValue: 1, maxValue: 5, onKey: true}, label: 'Range' } }).
        br().
        // But if we want to bind a different object, we need to create a sub-context
        // with that object as data:
        startContext({data: this.user}).
          // Note that I can add properties from either the object or the class
          add(this.user.ID.__, this.user.FIRST_NAME.__, SimpleUser.LAST_NAME.__, SimpleUser.AGE.__).
          add(this.user.HAVE_BIRTHDAY).
        endContext().
        add(" Doesn't work:", this.user.HAVE_BIRTHDAY). // Won't work because wrong 'data' in context

        start('h2').add('Visibility').end().
        add(this.READ_WRITE.__, this.READ_ONLY.__, this.DISABLED.__, this.HIDDEN.__, this.MAYBE_DISABLED.__, this.MAYBE_HIDDEN.__).
        br().
        add(this.FLIP).

        start('h2').add('DetailView').end().
        // Simpler than adding all of the properties yourself, just use a DetailView
        tag({class: 'foam.u2.DetailView', data: this.user}).
        br().br().
        // or Simpler, just:
        add(this.user).
        br().br().

        start('h2').add('TableView').end().
        start({class: 'foam.u2.view.TableView', data: this.users}).
          style({height: '200px', display: 'contents'}).
        end().

        start('h2').add('DAOList').end().
        start({class: 'foam.u2.DAOList', data: this.users, rowView: foam.u2.DetailView }).
          style({width: '800px'}).
        end().

        start('h2').add('DAOBrowserView').end().
        /*
        TODO: CSS column layout is broken outside of NANOS
        start({class: 'foam.comics.v2.DAOBrowserView', data: this.users }).
          style({height: '200px', display: 'contents'}).
        end().
        */

        // No need to embed a whole DOM tree in one render() method, it can be broken
        // up to multiple methods:
        call(this.renderSeeAlso).

        call(this.renderFutureList).
      end(); // Notice how this is the end of the first real line of code in the render() method.
    },

    function renderSeeAlso() {
    this.start('h2').add('See Also').end().
    add('Advanced topics covered elsewhere:').
    start('ol').
      start('li').start('a').attrs({href: '/foam3/src/foam/demos/u2/AllViews.html'}).add('All Views').end().end().
      start('li').start('a').attrs({href: 'http://localhost:8080/foam3/src/foam/demos/u2/Border.html'}).add('Borders').end().end().
      start('li').start('a').attrs({href: 'http://localhost:8080/foam3/src/foam/demos/u2/Visibility.html'}).add('Visibility').end().end().
    end();
    },

    function renderFutureList() {
      this.start('h2').add('Future').end().
      add('Advanced topics to be covered in the future:').
      start('ol').
        start('li').add('Validation').end().
        start('li').add('i18n').end().
        start('li').add('a11y').end().
        start('li').add('Themes').end().
        start('li').add('Stacks').end().
        start('li').add('Sections + Columns').end().
        start('li').add('Mementos').end().
        start('li').add('Permissions').end().
        start('li').add("tableCellFormatter's").end().
        start('li').add('Menus').end().
        start('li').add('Search').end().
        start('li').add('registerElement').end().
        start('li').add('el() / element_').end().
        start('li').add('CView Integration').end().
      end();
    }
  ],

  actions: [
    {
      name: 'flip',
      code: function() {
        this.flag = ! this.flag;
      }
    },
    {
      name: 'enable',
      code: function() {
        this.flag = true;
      },
      isEnabled: function(flag) { return ! flag; }
    },
    {
      name: 'disable',
      code: function() {
        this.flag = false;
      },
      isEnabled: function(flag) { return flag; }
    },
    {
      name: 'addContentToView',
      code: function addContent() {
        this.namedView.add('Add content!\n');
      }
    },
    function removeContent() {
      this.namedView.removeAllChildren();
    }
  ],

  listeners: [
    {
      name: 'onClick',
      code: function() { alert('onClick listener'); }
    }
  ]
});

tag({class: 'AllFeatures'});
