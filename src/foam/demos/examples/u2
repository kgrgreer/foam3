
## U3
##  Background
U3 is FOAM's native UI library.
It is named U3 because it is FOAM's third UI library.
The first UI library was template based and U2, FOAM's second UI library, was based on an Internal Domain Specific Language (IDSL) or Embedded Domain Specific Language (EDSL).
This IDSL is used to describe virtual DOM structures.
DOM is the browser's native API for manipulating the page contents, and stands for Document Object Model.
A Virtual-DOM is an API which mirrors the real DOM API but does so in JS.
U3 is a simplification of U2.
<br>
The advantages of a Virtual-DOM are:
<ol>
<li>It is more secure because, unlike template-based approaches, it isn't prone to Cross-Site-Scripting (XSS) attacks.</li>
<li>It can offer higher-level features and abstracts over browser incompatibilities.</li>
<li>It doesn't require a template parser, which can either make builds faster or the download size smaller, depending on where the template parsing is performed.</li>
<li>It offers higher-level features which enable you to perform some functions with less code.</li>
</oll>
Improved security was the primary motivation for U2.
Simplified use over U2, without losing any of U2's security benefits, was the primary motivation for U3.

All 32 components extend foam.u2.Element, which loosely modelled after the DOM <a href="https://www.w3schools.com/jsref/dom_obj_all.asp">Element<a> class.
--
add('testing');

##   U3 vs. Real DOM
The first example creates a ul tag with 100 li children using the browser's build-in DOM API.
The second example does the same thing using U3. Notice how the two examples are very similar.
--
console.profile('p1');
function test1() {
  var startTime = performance.now();
  var node = document.createElement("UL");               // Create a <ul> node
  for ( var i = 0 ; i < 10 ; i++ ) {
    var li = document.createElement("LI")
    li.appendChild(document.createTextNode("text" + i)); // Append an <li>
    node.appendChild(li);
  }
  start().call(function() { this.element_.appendChild(node); });
  log('DOM', performance.now() - startTime);
}
test1();
console.profileEnd('p1');


console.profile('p2');
function test2() {
  var startTime = performance.now();
  var node = foam.u2.Element.create({nodeName: 'UL'}); // Create a <ul> node
  for ( var i = 0 ; i < 10 ; i++ )
    node.start('li').add("text" + i).end();            // Append an <li>

  add(node);
  log('U3', performance.now() - startTime);
}
test2()
console.profileEnd('p2');

##   DSL
##   Intro1
##   Hello World!
Let's use U3 to say hello
--
add(foam.u2.Element.create().add('Hello World!'));
##   nodeName
If you inspect the HTML output from the Hellow World! example, you'll notice that it is a div tag.<br>
However, if you want to change it to another type, you can specify the node's name with the nodeName property.
An Element's nodeName can't be changed after it is created. It must either be set as an argument of create(),
or by changing the default value of the 'nodeName' property.
--
add(foam.u2.Element.create({nodeName: 'b'}).add('Hello World!'));

start().br().end();

foam.CLASS({
  name: 'Example',
  extends: 'foam.u2.Element',
  properties: [
    [ 'nodeName', 'b' ]
  ],
  methods: [
    function render() {
      this.add('Hello World (from a component)!');
    }
  ]
});

tag({class: 'Example'});

##  Short Form
Given it is so common to want to create new Elements from within other Elements, Element has a method called start()
which is used to add another Element to it.
--
start('b').add('Hello again!').end();
##  Tag
In the above example we wanted to add text inside of the <b> tag, so we started with start() and then called add() before end()-ing the tag.
But if you didn't need to add() anything inside the tag, you could just use the tag() method. The next two lines are equivalent:
--
start('input').end();
tag('input');
##   ControllerMode
##   DisplayMode
##   Borders
A Border is a component meant to be a container for other elements. Examples might inluce
a card, a shadow border, a tab-control, etc.
If an element has a 'content' element, then when children are add()'ed to the element,
they will be inserted into the 'content' element, rather that at the end of the element,
as is normal.
--
foam.CLASS({
  name: 'CardBorder',
  extends: 'foam.u2.Element',
  css: `
    ^ {
      background: white;
      border-radius: 3px;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.38);
      margin: 8px;
      transform-origin: top left;
      display: inline-block;
    }
    ^content { padding: 6px; width: 300px; height: 200px; background: white; }
  `,
  methods: [
    function render() {
      this.
        addClass().
        start('div', null, this.content$).
          addClass(this.myClass('content')).
        end().
        start().
          add('footer').
        end();
    }
  ]
});

add(CardBorder.create().add('content').tag('br').add('more content').tag('br').add('even more content'));

##    content
##   ViewSpec
##   Tooltips
You can set the tooltip for an element by setting the 'tooltip' property
--
start('div', {tooltip: 'My Tooltip'}).add('hover for tooltip').end();
// or
add(foam.u2.Element.create({nodeName: 'b', tooltip: 'tooltip'}).add('hover for tooltip2'));

##   shown / show() / hide()
--
start('div', {shown: false}).add('shown: false').end(); // won't be shown
start('div', {shown: true}).add('shown: true').end();   // will be shown
start('div').hide().add('hide()').end();                // won't be shown
start('div').hide().show().add('show()').end();         // will be shown

##   focused / focus() / blur()
--
// TODO: update to use data when working
start('input', {value: "doesn't have focus"}).attrs({value: 'not focused'}).end();
add(' ');
start('input', {value: "doesn't have focus"}).attrs({value: 'focused'}).focus().end();

##   Creating a Component
<ol>
  <li>Create a foam.CLASS()
  <li>Extend foam.u2.Element, foam.u2.View (if you want to be a view for another 'data' object),
  foam.u2.Controller (if you want to be a view for yourself), or some other foam class that directly
  or indirection extends foam.u2.Element.
  <li>Set your 'nodeName' property's value: if you desire to be something other than 'div'.
  <li>Define component specific CSS with the css: property, if required.
  <li>Define a render() method to add children, css classes, direct css styles, DOM listeners, and
  set required html attributes.
</ol>

--
foam.CLASS({
  name: 'ExampleElement',
  extends: 'foam.u2.Element',
  // extends: 'foam.u2.View',
  // extends: 'foam.u2.Controller',

  css: `
    ^ {
      font: Roboto;
      margin: 4px;
    }
  `,

  properties: [
    [ 'nodeName', 'i' ],
  ],

  methods: [
    function render() {
      this.
        addClass(). // short for addClass(this.myClass())
        style({border: '2px solid gray', background: 'lightgray'}).
        attrs({comment:  'something'}).
        add('some text ').
        start('b').
          add('some bold text').
        end().
        br().
        on('click', this.onClick);
    }
  ],

  listeners: [
    {
      name: 'onClick',
      code: function() { window.alert('clicked'); }
    }
  ]
});

tag({class:'ExampleElement'});

##    render()
##   Keyboard Shortcuts
--
foam.CLASS({
  name: 'KeyboardTest',
  extends: 'foam.u2.Controller',
  properties: [
    // TODO: view: shouldn't be required, remove when fixed.
    // appears to be issue with ModeAltView
    { class: 'Int', name: 'count', value: 5, view: 'foam.u2.IntView' }
  ],
  methods: [
    function render() { this.add(this.COUNT, ' ', this.INCR); }
  ],
  actions: [
   {
     name: 'incr',
     code: function() { this.count++; },
     keyboardShortcuts: [ '+' ]
   }
  ]
});
var k = KeyboardTest.create();
tag(k);

##   el()
##   id
You can set an element's id, but keep in mind that it isn't normally a good idea to do so because
it prevents you from instantiating two instances of your component.
--
start('b', {id: 'myId1'}).add('inspect me to see my id').end();
start('i').setID('myId2').add('this method also works').end();

##   E()
##   Children
##    start() / end()
##    br()
br() is just short form for tag('br'), the html line-break element.
--
start().
  add('line 1').
  start('br').end(). // long form
  add('line 2').
  tag('br').         // medium form
  add('line 3').
  br().              // short form
  add('line 4').
end();
##    nbsp()
no-breaking space, the same as adding &amp;nbsp; to your html
--
start('div')
  .style({width: 100})
  .add('Breaking space').br()
  .add('NonBreaking').nbsp().add('space').br()
end();
##    remove()
##    add()
##     adding properties
##     toE()
##     view:
##    removeAllChildren()
##    setChildren()
##   Styling
CSS styling can be added to your elements in two ways:
<ol>
  <li>By specifying in-lined CSS with the style() method.
  <li>By add a CSS class and then providing styling for that class in your component's css: block.
</ol>
##    style()
Use style() to add in-lined CSS styling to a parent start() tag.
--
start().style({background: 'pink', border: '2px solid black'}).add('styled content').end()
##    css:
The same output and styling as the above example, but using a css: block and named CSS Class.
--
foam.CLASS({
  name: 'CSSExample',
  extends: 'foam.u2.Element',
  css: `
    .myBlock {
      background: pink;
      border: 2px solid black;
    }
  `,
  methods: [
    function render() {
      this.start().addClass('myBlock').add('styled content').end();
    }
  ]
});
tag(CSSExample);

##    myClass()
The above example adds the CSS class name "myBlock" to the element to be styled,
and then adds a corresponding styling block in its CSS section. This may seem
fine, but it introduces problems. Consider the following example which also
uses the 'myBlock' CSS classname:

--
foam.CLASS({
  name: 'CSSExample2',
  extends: 'foam.u2.Element',
  css: `
    .myBlock {
      color: red;
    }
  `,
  methods: [
    function render() {
      this.start().addClass('myBlock').add('more styled content').end();
    }
  ]
});
tag(CSSExample2);

add(`
Notice that it also has a pink background and
black border. CSS has leaked from CSSExample into CSSExample2.
This happens because CSS has a global namespace and names can leak between
components. Two component writers might choose common CSS classnames like:
'important', 'left-panel', 'content', 'header', 'section', etc. and the result
would be the corruption of both of their components.

To work around this problem, U3 introduces scoped CSS class names. This allows
component writers to choose whatever class names they like without fear of
conflict with other components.

This works by calling this.myClass('classname') which will convert 'classname' into a component
specific CSS classname. It does this by prefixing the classname with the FOAM class id, which
includes the class package and name, but with periods (.) replaced with dashes (-).

In the css: block, we use the '^' character to indicate class names that have been scoped with myClass().
So, instead of '.myBlock', which would be unscoped, we use '^myBlock', which is scoped to the current
component's CSS.

Ex.:
`);
foam.CLASS({
  name: 'CSSExample3',
  extends: 'foam.u2.Element',
  css: `
    ^myBlock {
      background: pink;
      border: 2px solid black;
    }
  `,
  methods: [
    function render() {
      this.start().addClass(this.myClass('myBlock')).add('more styled content').end();
    }
  ]
});
tag(CSSExample3);

foam.CLASS({
  name: 'CSSExample4',
  extends: 'foam.u2.Element',
  css: `
    ^myBlock {
      color: red;
    }
  `,
  methods: [
    function render() {
      this.start().addClass(this.myClass('myBlock')).add('more styled content').end();
    }
  ]
});
tag(CSSExample4);

add(`
Notice that the last two examples each use the CSS classname 'myBlock' but don't
conflict with each other and neither leaks CSS to/from the other.

If you inspect the CSS from the last example, you'll see that it's actually 'CSSExample4-myBlock'.
If it had been in package: 'com.acme', then it would have been 'com-acme-CSSExample4-myBlock'.
`);

##    CSS Variables
##    inheritCSS
By default Element sub-classes inherit the CSS of their parent classes, but if the inheritCSS
property is set to false, then CSS isn't inherited and the Element class starts from a clean slate.
--
foam.CLASS({
  name: 'ParentElement',
  extends: 'foam.u2.Element',
  css: `
    ^ { background: pink; }
  `
});


foam.CLASS({
  name: 'NormalChildElement',
  extends: 'ParentElement',
  methods: [
    function render() {
      this.addClass().add('InheritCSS: ', this.model_.inheritCSS);
    }
  ]
});


foam.CLASS({
  name: 'NoInheritCSSChildElement',
  extends: 'ParentElement',
  inheritCSS: false,
  css: '^ { color: red; }',
  methods: [
    function render() {
      this.addClass().add('No-inheritCSS: ', this.model_.inheritCSS);
    }
  ]
});

log(NoInheritCSSChildElement.model_.inheritCSS);

start({class: 'NormalChildElement'}).end();
start({class: 'NoInheritCSSChildElement'}).end();

// TODO: fix, isn't working

##   CSS Classes
##    addClass() / addClasses()
##    enableClass()
--
foam.CLASS({
  package: 'some.good.package',
  name: 'Test',
  extends: 'foam.u2.Element',
  css: `
    ^ { background: pink; }
    ^subsection { background: green; }
  `,
  classes: [
    {
       name: 'SubTest',
       extends: 'foam.u2.Element',
       css: `
         ^ { background: pink; }
       `,
       methods: [
         function render() {
           this.SUPER();
            this.
              addClass(this.myClass()).
              add(this.myClass());
         }
       ]
    }
  ],
  methods: [
    function render() {
      this.SUPER();
      this.
        addClass(this.myClass()).
        add(this.myClass()).
        start().
          addClass(this.myClass('subsection')).
          add(this.myClass('subsection')).
        end();
      this.add(this.SubTest.create({}, this));
    }
  ]
});
add(some.good.package.Test.create());
##    removeClass()

##   Attributes
##    attr() & setAttribute()
attr() and setAttribute() are the same, with setAttribute() being for DOM compatibility.
--
start('img').attr('src', '/foam3/src/foam/u2/images/foam_red.png').end();
start('img').setAttribute('src', '/foam3/src/foam/u2/images/foam_red.png').end();
##    attrs()
--
start('img').attrs({
  src: '/foam3/src/foam/u2/images/foam_red.png',
  alt: 'foam logo',
  height: 100
}).end();
##    removeAttribute()
--
##   Control Flow
##    repeat()
--
start('ul').repeat(1, 10, function(i) { this.start('li').add(i).end(); }).end();

##    call()
--
start()
  .call(function() { this.add('call'); })
.end();

##    callIf
--
start()
  .callIf(true,  function() { this.add('true'); })
  .br()
  .callIf(false, function() { this.add('false'); })
.end();

##    callIfElse
--
start()
  .callIfElse(true,  function() { this.add('true'); }, function() { this.add('false'); })
  .br()
  .callIfElse(false, function() { this.add('false'); }, function() { this.add('false'); })
.end();

##    forEach()
--
start('ul').forEach(['Apples', 'Bananas', 'Oranges'], function(i) { this.start('li').add(i).end(); }).end();
##   Events
##    on() & addEventListener
on() and onEventListener() are the same, with onEventListener() being for DOM compatibility.
--
start('a').add('click me').on('click', function() { window.alert('clicked'); }).end();

##    removeEventListener()
Provided for compatibility with DOM, but rarely used.
--
foam.CLASS({
  name: 'RemoveEventListenerDemo',
  extends: 'foam.u2.Element',
  methods: [
    function render() {
      this.on('click', this.onClick).add('click me (once)');
    }
  ],
  listeners: [
    function onClick() {
      log('clicked, removing listener');
      this.removeEventListener('click', this.onClick);
    }
  ]
});

tag(RemoveEventListenerDemo);

##    onKey
--
foam.CLASS({
  name: 'OnKeyDemo',
  extends: 'foam.u2.Element',

  properties: [
    {
      class: 'String',
      name: 'value1',
      onKey: true
    },
    {
      class: 'String',
      name: 'value2',
      // onKey: false // not needed, as false is the default
    }
  ],

  methods: [
    function render() {
      this.add(this.VALUE1, this.value1$, this.VALUE2, this.value2$);
      this.tag(this.VALUE2, { onKey: true});
      this.tag({class: 'foam.u2.TextField', onKey: true, data: this.value1$});
      this.tag({class: 'foam.u2.TextField', onKey: false, data: this.value1$});
    }
  ]
});

// TODO: fix
tag({class: 'OnKeyDemo'});

##    DAOs
Let's create a DAO with some sample data to work with:
--
foam.CLASS({
  name: 'DAOSampleData',
  properties: [
    { class: 'Int', name: 'id' }, 'name', 'value'
  ],
  methods: [
    function toSummary() { return this.id + ' ' + this.value; }
  ]
});

var dao = foam.dao.EasyDAO.create({
  of: DAOSampleData,
  daoType: 'MDAO',
  testData: [
    { id: 1, name: 'John',  value: 'value1' },
    { id: 2, name: 'John',  value: 'value2' },
    { id: 3, name: 'Kevin', value: 'value3' },
    { id: 4, name: 'Kevin', value: 'value4' },
    { id: 5, name: 'Larry', value: 'value5' },
    { id: 6, name: 'Linda', value: 'value6' }
  ]
});

// Now, to add the data to our view, we can just call dao.select():
add('Example 1');
start('ul').call(function() {
  dao.select(d => {
    this.start('li').add(d.id, ' ', d.name, ' ', d.value).end();
  });
});

// That works great, but has one limitation: it's static. If the data in the DAO
// updates, the view won't, it will just remain the same forever. Sometimes, that's
// what you want, but if you wanted the view to update whenever the DAO updated,
// then instead call the Element.select() method:

add('Example 2');
start('ul')
  .select(dao, function(d) {
    this.start('li').add(d.id, ' ', d.name, ' ', d.value).end();
  })
.end();

// Now, if we add more data in the future, notice that only the second list
// updates:

dao.put(DAOSampleData.create({id: 999, name: 'Superman', value: 'Hero'}));

start('a').add('click to add more data').on('click', function() {
  for ( let i = 0 ; i < 10 ; i++ ) {
    window.setTimeout(() => {
      var j = Math.floor(Math.random() * 1000);
      var d = DAOSampleData.create({id: j, name: 'Mr. ' + j, value: 'value ' + j});
      dao.put(d);
    }, 250 * i);
  }
}).end();

##    select()
##   startContext() / endContext()
##   i18n
##    Messages
##    translate()
The easiest way is in your view which adds the data to the GUI, instead
of calling .add(), you call .translate() instead.
The first argument of translate() is a suitable translation key, and the
second argument is the default English value that you would have add()'ed.
--

foam.CLASS({
  name: 'SampleTranslationData',
  properties: [
    'id', 'label'
  ]
});

var dao = foam.dao.EasyDAO.create({
  of: SampleTranslationData,
  daoType: 'MDAO',
  testData: [
    { id: 'key1', label: 'label1' },
    { id: 'key2', label: 'label2' },
    { id: 'key3', label: 'label3' }
  ]
});

// Gives untranslated values:
add(E().select(dao, function(d) {
  return this.E().add(d.id, ' ', d.label);
}));

add(E('hr'));

// create a simple mock translationService
var mockTranslationService = {
  getTranslation: function(_, _, def) { return def + ' en français'; }
};

// Gives translated values:
add(E().startContext({translationService: mockTranslationService}).select(dao, function(d) {
  return this.E().add(d.id, ' ').translate('SampleTranslationData.' + d.id + '.label', d.label);
}));

##   write()
The Element.write() method appends to Element to the end of the document body.
This is typically only used for debugging purposes, not in production code.
--
foam.u2.Element.create().start().add('Here I am, way at the bottom of the page!').end().write();

##   Tags
##    attributes
##    registerElement
The Context method 'registerElement' can be used to declare that a specified
Element subclass should be transparently used whenever an tag is created
with the specified node name.
--
foam.CLASS({
  name: 'Blink',
  extends: 'foam.u2.Element',
  properties: [
    [ 'nodeName', 'span' ],
    { class: 'Boolean', name: 'on' }
  ],

  methods: [
    function render() {
      this.show(this.on$);
      this.toggle();
    }
  ],

  listeners: [
    {
      name: 'toggle',
      isMerged: true,
      mergeDelay: 500,
      code: function() { this.on = ! this.on; this.toggle(); }
    }
  ]
});

// TODO: doesn't work
foam.__context__.registerElement(Blink, 'blink');
start('blink').add('blinking').end();

##    elementForName
##   View
The foam.u2.View class extends Element and adds a property named 'data', which it exports.
Views act as the display component (view) for their data. This is the standard MVC
pattern where the View is the View, and the 'data' is the Model.
##    fromProperty()
When Elements are used to view Property values, the fromProperty() method is called
and provided the Property object that the view is being associated with.
This allows the view to optionally configure itself based on Property values.
Examples properties that may be taken from the property include:
onKey, placeholder, displayWidth, size, min, max, of, daoKey, etc.
--
foam.CLASS({
  name: 'LabelledTextField',
  extends: 'foam.u2.View',

  properties: [
    { class: 'String', name: 'label' }
  ],

  methods: [
    function fromProperty(p) {
      this.label = p.label;
    },

    function render() {
      this.add(this.label, ': ');
      this.tag({class: 'foam.u2.tag.Input', data$: this.data$});
    }
  ]
});

foam.CLASS({
  name: 'LabelledTextFieldExample',
  extends: 'foam.u2.Controller',

  properties: [
    { class: 'String', name: 'firstName', view: 'foam.u2.TextField' },
    { class: 'String', name: 'lastName',  view: 'LabelledTextField' }
  ],

  methods: [
    function render() {
      this.add(this.FIRST_NAME, this.LAST_NAME);

      this.tag('hr');

      var l = LabelledTextField.create({data$: this.firstName$});
      l.fromProperty(this.FIRST_NAME);
      this.tag(l);
    }
  ]
});

tag({class: 'LabelledTextFieldExample'});

##   Controller
The foam.u2.Controller class extends Element and exports itself as 'data'. Unlike Views, which
provide a view for some other piece of data, a Controller provides a view for itself. It may
however create sub-Views which it includes in its own rendering.
##   Views
##    ActionView
Create an ActionView directly.
--
var timer = foam.util.Timer.create();
var av = foam.u2.ActionView.create({data: timer, action: timer.START});
tag(foam.u2.DetailView.create({data: timer}));
add(timer.time$);
tag('hr');
tag(av);
tag( foam.u2.ActionView.create({data: timer, action: timer.STOP}));
this.startContext({data: timer}).add(timer.I);

##   StackView
##   More
