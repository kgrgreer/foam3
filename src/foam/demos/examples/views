## Views
--

## String
--
foam.CLASS({
  name: 'Example',
  properties: [
    {
      class: 'String',
      name: 'default'
    },
    {
      class: 'String',
      name: 'featured',
      required: true,
      placeholder: 'placeholder',
      help: 'Help text.'
    },
    {
      class: 'String',
      name: 'stringWithDisplayWidth',
      displayWidth: 4
    },
    {
      class: 'String',
      name: 'stringWithTextFieldWithSize',
      displayWidth: 4,
      view: {
        class: 'foam.u2.TextField',
        maxLength: 4
      }
    },
    {
      class: 'String',
      name: 'stringWithTextArea',
      view: {
        class: 'foam.u2.tag.TextArea',
        rows: 8, cols: 80,
      }
    },
  ]
});

add(foam.u2.DetailView.create({data: Example.create()}));

## String with Choices
--
foam.CLASS({
  name: 'Example',
  properties: [
    {
      class: 'String',
      name: 'radioView',
      view: {
        class: 'foam.u2.view.RadioView',
        choices: ['Yes', 'No', 'Maybe']
      }
    },
    {
      class: 'String',
      name: 'radioViewHorizontal',
      value: 'Yes',
      view: {
        class: 'foam.u2.view.RadioView',
        choices: ['Yes', 'No', 'Maybe'],
        isHorizontal: true
      }
    },
    {
      class: 'String',
      name: 'textField',
      value: 'Yes',
      view: {
        class: 'foam.u2.TextField',
        choices: ['Yes', 'No', 'Maybe']
      }
    },
    {
      class: 'String',
      name: 'choiceView',
      view: {
        class: 'foam.u2.view.ChoiceView',
        choices: ['Yes', 'No', 'Maybe']
      }
    },
    {
      class: 'String',
      name: 'choiceViewWithSize',
      view: {
        class: 'foam.u2.view.ChoiceView',
        size: 3,
        choices: ['Yes', 'No', 'Maybe']
      }
    },
    {
      class: 'String',
      name: 'choiceViewWithPlaceholder',
      value: 'Yes',
      view: {
        class: 'foam.u2.view.ChoiceView',
        placeholder: 'placeholder',
        choices: ['Yes', 'No', 'Maybe']
      }
    },
    {
      class: 'String',
      name: 'choiceViewWithMultipleViews',
      value: 'Yes',
      view: {
        class: 'foam.u2.MultiView',
        views: [
          {
            class: 'foam.u2.view.ChoiceView',
            size: 10,
            choices: ['Yes', 'No', 'Maybe']
          },
          {
            class: 'foam.u2.view.ChoiceView',
            size: 3,
            choices: ['Yes', 'No', 'Maybe']
          },
          {
            class: 'foam.u2.view.ChoiceView',
            placeholder: 'placeholder',
            choices: ['Yes', 'No', 'Maybe']
          },
          'foam.u2.TextField'
        ]
      }
    },
    {
      class: 'String',
      name: 'choiceViewWithValues',
      view: {
        class: 'foam.u2.view.ChoiceView',
        choices: [ [1, 'Yes'], [0, 'No'], [0.5, 'Maybe']]
      }
    },
  ]
});

var t = Example.create();
add(foam.u2.detail.SectionedDetailView.create({data: t}));
// add(foam.u2.DetailView.create({data: t}));

## Boolean
--
foam.CLASS({
  name: 'Example',
  properties: [
    {
      class: 'Boolean',
      name: 'default'
    },
    {
      class: 'Boolean',
      name: 'booleanWithRadio',
      view: function(_, X) {
        return {
          class: 'foam.u2.view.RadioView',
          choices: [
            [true, 'Yes'],
            [false, 'No']
          ],
          isHorizontal: true
        };
      }
    }
  ]
});

add(foam.u2.CheckBox.create());
var t = Example.create();
add(foam.u2.detail.SectionedDetailView.create({data: t}));
// add(foam.u2.DetailView.create({data: t}));


## Numbers
--
foam.CLASS({
  name: 'Example',
  properties: [
    {
      class: 'Int',
      name: 'default'
    },
    {
      class: 'Int',
      name: 'help',
      help: 'Help text.'
    },
    {
      class: 'Int',
      name: 'tooltip',
      view: { class: 'foam.u2.view.IntView', tooltip: 'Please enter a number.' }
    },
    {
      class: 'Int',
      name: 'intWithIntView',
      view: {
        class: 'foam.u2.view.IntView',
        onKey: true,
        displayWidth: 50
      }
    },
    {
      class: 'Int',
      name: 'intWithMinAndMax',
      min: 1,
      max: 5,
      value: 3,
      units: 'rating (1-5)'
    },
    {
      class: 'Int',
      name: 'intWithRangeView',
      view: {
        class: 'foam.u2.RangeView'
      }
    },
    {
      class: 'Int',
      name: 'intWithProgressView',
      view: {
        class: 'foam.u2.ProgressView'
      },
      value: 42
    },
    {
      class: 'Int',
      name: 'intWithMultiView',
      view: {
        class: 'foam.u2.MultiView',
        views: [ 'foam.u2.RangeView', 'foam.u2.IntView' ]
      }
    },
    {
      class: 'Int',
      name: 'intWithMultiViewVertical',
      view: {
        class: 'foam.u2.MultiView',
        horizontal: false,
        views: [ 'foam.u2.RangeView', { class: 'foam.u2.view.IntView', onKey: true } ]
      }
    },
    /*
    {
      class: 'Int',
      name: 'intWithDualView2',
      view: {
        class: 'foam.u2.view.DualView',
        viewa: 'foam.u2.RangeView',
        viewb: 'foam.u2.ProgressView'
      }
    },
    */
    {
      class: 'Byte',
      name: 'defaultByte'
    },
    {
      class: 'Short',
      name: 'defaultShort'
    },
    {
      class: 'Long',
      name: 'defaultLong'
    },
    {
      class: 'Float',
      name: 'defaultFloat'
    },
    {
      class: 'Float',
      name: 'floatWithPrecision',
      precision: 2,
      value: 3.1415926
    },
    {
      class: 'Double',
      name: 'defaultDouble'
    },
    {
      class: 'Float',
      name: 'temperature',
      value: 1,
      view: {
        class: 'foam.nanos.pm.TemperatureCView',
        width: 300
      }
    },
    {
      class: 'Float',
      name: 'multiViewFloat',
      view: {
        class: 'foam.u2.MultiView',
        views: [
          { class: 'foam.u2.TextField', placeholder: 'textfield', onKey: true },
          { class: 'foam.u2.FloatView', placeholder: 'floatview', onKey: true },
          { class: 'foam.u2.TextField', onKey: false },
          { class: 'foam.u2.FloatView', onKey: false },
          { class: 'foam.u2.FloatView', onKey: false, precision: 2 },
          { class: 'foam.u2.FloatView', onKey: false, precision: 2, trimZeros: false }
        ]
      }
    }
  ]
});

add(foam.u2.DetailView.create({data: Example.create()}));

## Enums
--
foam.CLASS({
  name: 'Example',
  properties: [
    {
      class: 'Enum',
      of: 'foam.u2.layout.DisplayWidth',
      name: 'displayWidth'
    }
  ]
});

var data = Example.create();
add(foam.u2.DetailView.create({data: data}));

## Dates and Times
--
foam.CLASS({
  name: 'Example',
  properties: [
    {
      class: 'Date',
      name: 'defaultDate',
    },
    {
      class: 'Date',
      name: 'dateRWAndRO',
      factory: function() { return new Date(); },
      view: {
        class: 'foam.u2.MultiView',
        views: [
          { class: 'foam.u2.view.DateView', onKey: false },
          { class: 'foam.u2.view.DateView', onKey: false },
          { class: 'foam.u2.view.DateView', mode: foam.u2.DisplayMode.RO }
        ]
      }
    },
    {
      class: 'Date',
      name: 'dateRWAndROOnKey',
      factory: function() { return new Date(); },
      view: {
        class: 'foam.u2.MultiView',
        views: [
          { class: 'foam.u2.view.DateView', onKey: true },
          { class: 'foam.u2.view.DateView', onKey: true },
          { class: 'foam.u2.view.DateView', mode: foam.u2.DisplayMode.RO }
        ]
      }
    },
    {
      class: 'DateTime',
      name: 'defaultDateTime',
    },
    {
      class: 'DateTime',
      name: 'defaultDateTime2',
      view: {
        class: 'foam.u2.MultiView',
        views: [
          { class: 'foam.u2.view.DateTimeView', onKey: true },
          { class: 'foam.u2.view.DateTimeView', onKey: true },
          { class: 'foam.u2.view.DateView', onKey: true }
        ]
      }
    },
    {
      class: 'Time',
      name: 'defaultTime'
    },
    {
      class: 'Duration',
      name: 'duration'
    }
  ]
});

var data = Example.create();
add(foam.u2.DetailView.create({data: data}));
add(data.defaultDateTime$);


## Colours
--
foam.CLASS({
  name: 'Example',
  properties: [
    {
      class: 'Color',
      name: 'defaultColor'
    },
    {
      class: 'Color',
      name: 'readOnlyColor',
      value: 'orange',
      view: 'foam.u2.view.ReadColorView'
    },
    {
      class: 'Color',
      name: 'multiView',
      value: 'orange',
      view: {
        class: 'foam.u2.MultiView',
        views: [
          'foam.u2.view.ColorEditView',
          'foam.u2.view.ReadColorView'
        ]
      }
    }
  ]
});

var data = Example.create();
add(foam.u2.DetailView.create({data: data}));


## Passwords
--
foam.CLASS({
  name: 'Example',
  properties: [
    {
      class: 'Password',
      name: 'defaultPassword',
      value: 'secret'
    }
  ]
});

var data = Example.create();
add(foam.u2.DetailView.create({data: data}));


## Images
--
foam.CLASS({
  name: 'Example',
  properties: [
    {
      class: 'Image',
      name: 'defaultImage',
      value: '../u2/Dragon.png'
    },
    /*
    Only works with NANOS
    {
      class: 'Image',
      name: 'imageView',
      view: 'foam.u2.view.ImageView',
      value: '../u2/Dragon.png'
    },
    {
      class: 'Image',
      name: 'dualImageView',
      view: {
        class: 'foam.u2.MultiView',
        views: [
          'foam.u2.TextField',
          'foam.u2.view.ImageView'
        ]
      },
      value: '../u2/Dragon.png'
    }
    */
  ]
});

var data = Example.create();
add(foam.u2.DetailView.create({data: data}));


## Arrays
--
foam.CLASS({
  package: 'foam.demos.u2',
  name: 'SampleData',
  properties: [
    {
      class: 'String',
      name: 'id'
    },
    'name',
    'value'
  ],
  methods: [
    function toSummary() { return this.id + ' ' + this.value; }
  ]
});

foam.CLASS({
  name: 'Example',
  properties: [
    {
      class: 'StringArray',
      name: 'defaultStringArray'
    },
    {
      class: 'StringArray',
      name: 'stringArrayRowView',
      view: 'foam.u2.view.StringArrayRowView',
      factory: function() { return ['row1', 'row2', 'row3']; }
    },
    {
      class: 'FObjectArray',
      name: 'FObjectArrayMultiView',
      of: 'foam.demos.u2.SampleData',
      view: { class: 'foam.u2.MultiView',
        views: [
          { class: 'foam.u2.view.TitledArrayView'  },
          { class: 'foam.u2.view.FObjectArrayView' }
        ]
      }
    }
  ]
});

var data = Example.create();
add(foam.u2.DetailView.create({data: data}));

## Maps
--
foam.CLASS({
  name: 'Example',
  properties: [
    {
      class: 'Map',
      name: 'map'
    }
  ]
});

var data = Example.create();
add(foam.u2.DetailView.create({data: data}));

## DAOs
--
foam.CLASS({
  name: 'DAOSampleData',
  properties: [
    { class: 'Int', name: 'id' }, 'name', 'value'
  ],
  methods: [
    function toSummary() { return this.id + ' ' + this.value; }
  ]
});

var dao = foam.dao.EasyDAO.create({
  of: DAOSampleData,
  daoType: 'MDAO',
  testData: [
    { id: 1, name: 'John',  value: 'value1' },
    { id: 2, name: 'John',  value: 'value2' },
    { id: 3, name: 'Kevin', value: 'value3' },
    { id: 4, name: 'Kevin', value: 'value4' },
    { id: 5, name: 'Larry', value: 'value5' },
    { id: 6, name: 'Linda', value: 'value6' }
  ]
});

foam.CLASS({
  name: 'Example',
  properties: [
    {
      class: 'foam.dao.DAOProperty',
      of: 'DAOSampleData',
      name: 'dao',
      visibility: 'RW',
      value: dao
    },
    {
      class: 'foam.dao.DAOProperty',
      of: 'DAOSampleData',
      name: 'daoList',
      value: dao,
      visibility: 'RW',
      view: 'foam.u2.DAOList'
    }
  ]
});

var data = Example.create();
add(foam.u2.DetailView.create({data: data}));
add(foam.u2.detail.SectionedDetailView.create({data: data}));

## Rich Text
--

var code = `
if ( true ) {
  console.log('true');
}
`;

foam.CLASS({
  name: 'Example',
  properties: [
    {
      class: 'String',
      name: 'htmlView',
      value: '<b>bold</b><br/><i>italic</i>',
      view: 'foam.u2.HTMLView'
    },
    {
      class: 'Code',
      name: 'roCode',
      label: 'RO Code',
      view: 'foam.u2.view.PreView',
      value: code
    },
    {
      class: 'Code',
      name: 'code',
      value: code
    },
    {
      class: 'String',
      name: 'markdownView',
      value: `
        # Heading 1
        ## Heading 2
        ### Heading 3
        #### Heading 4
        ##### Heading 5
        ###### Heading 6
        text # not a heading

        [a link](https://github.com/kgrgreer/foam3)

        normal _italics_ **bold** \`code\`
        \`\`\`
        a block of code
        \`\`\`
      `.split('\n').map(l => l.trim() + '\n').join(''),
      view: {
        class: 'foam.u2.MultiView',
        horizontal: false,
        views: [
          { class: 'foam.u2.tag.TextArea', onKey: true, rows: 16, cols: 80 },
          'foam.u2.view.MarkdownView'
        ]
      }
    },
    {
      class: 'FObjectProperty',
      of: 'foam.flow.laminar.Document',
      name: 'laminar',
      value: {
        class: 'foam.flow.laminar.Document',
        doclets: [
          {
            class: 'foam.flow.laminar.MarkdownDoclet',
            text: `
              Lets learn about **foam.util.async.Sequence** and
              **foam.flow.laminar.AutoDefinitionDoclet**
            `
          },
          {
            class: 'foam.flow.laminar.PrintDoclet',
            key: 'definitionWords',
            showMeta: true
          },
          {
            class: 'foam.flow.laminar.AutoDefinitionDoclet'
          }
        ]
      },
      view: {
        class: 'foam.flow.laminar.DocumentView'
      }
    }
  ]
});

var data = Example.create();
add(foam.u2.DetailView.create({data: data}));

## Objects
--
foam.CLASS({
  name: 'Example',
  properties: [
    {
      name: 'any',
      view: 'foam.u2.view.AnyView'
    },
    {
      name: 'fobjectView',
      view: 'foam.u2.view.FObjectView',
      value: { class: 'foam.util.Timer' }
    },
    {
      class: 'FObjectProperty',
      name: 'detailView',
      of: 'foam.util.Timer',
    }
  ]
});

var data = Example.create();
add(foam.u2.DetailView.create({data: data}));

## DetailViews
--
var data = foam.util.Timer.create();

start('h2').add('DetailView').end();
add(foam.u2.DetailView.create({data: data}));
tag('p');

start('h2').add('DetailView with expandPropertyViews: true').end();
add(foam.u2.DetailView.create({data: data, expandPropertyViews: true}));
tag('p');

start('h2').add('DetailView with title: \'\'').end();
add(foam.u2.DetailView.create({data: data, title: ''}));
tag('p');

start('h2').add('DetailView with showActions: false').end();
add(foam.u2.DetailView.create({data: data, showActions: false}));
tag('p');

start('h2').add('DetailView with visibility: \'RO\'').end();
add(foam.u2.DetailView.create({data: data, mode: 'RO'}));
tag('p');

start('h2').add('DetailView with visibility: \'DISABLED\'').end();
add(foam.u2.DetailView.create({data: data, mode: 'DISABLED'}));
tag('p');

start('h2').add('SectionedDetailView').end();
add(foam.u2.detail.SectionedDetailView.create({data: data, title: 'SectionedDetailView'}));
tag('p');

start('h2').add('VerticalDetailView').end();
add(foam.u2.detail.VerticalDetailView.create({data: data, title: 'VerticalDetailView'}));

## ReadWriteView
The ReaWriteView composes two different views, one for displaying the data
when it is not being edited, and another when it is. Like a spreadsheet cell
which normally appears as a label until it is selected and then becomes a
text field for editing.
--
foam.CLASS({
  name: 'Example',
  properties: [
    {
      class: 'String',
      name: 'value',
      value: 'value',
      view: 'foam.u2.ReadWriteView'
    }
  ]
});

add(Example.create());

foam.CLASS({
  name: 'TextView',
  extends: 'foam.u2.ReadWriteView',

  methods: [
    function toReadE() {
      return foam.u2.HTMLView.create({data$: this.data$}, this);
    },

    function toWriteE() {
      this.data$.sub(this.onDataLoad);
      return foam.u2.tag.TextArea.create({rows: 20, cols: 120, escapeTextArea: false, data$: this.data$}, this);
    }
  ]
});

tag(TextView.create({data: '<b>bold</b> <i>italic</it>'}));
