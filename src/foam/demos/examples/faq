# Top
## FAQ

##  Built-In Constants
Where can I find built-in constants?
ex)
log("Method CODE property constant:", foam.core.Method.CODE);
foam.core.Method.CODE.describe;

Answer: Property constants are copied out of the model into to resulting class and prototype.
Example:
--
foam.CLASS({
  name: 'Test',
  properties: [ 'p1', 'p2' ]
});

log(Test.P1.name, Test.P2.name);

var t = Test.create();
log(t.P1.name, t.P2.name);

##  Class Type
Is class is a kind of type?

Answer:
A class is a class in the conventional OO sense.
When you create a foam.CLASS(), it will define a new class.
When you see something like { class: 'some.package.Name' , a: 1, b: 2 }, it will create
an object of class 'some.package.Name' with the property a set to 1 and b to 2.
It would be the equivalent to some.package.Name.create({a: 1, b: 2}).
FOAM extends the regular JSON syntax to support objects by creating classes by
specifying their class.
Ex.:
--
foam.CLASS({
  package: 'some.package2',
  name: 'Test',
  properties: [ 'p1', 'p2' ]
});

var p = foam.json.parse({class: 'some.package2.Test', p1: 42, p2: 'John'});
log(p.cls_.id);

##  Packages
How are packages defined in FOAM?

Answer: A classes package is defined with package: and is optional.
--
// Without a package:

foam.CLASS({
  name: 'Test',
  properties: [ 'p1', 'p2' ]
});

log(Test.create());

// With a package:

foam.CLASS({
  package: 'some.package2',
  name: 'Test',
  properties: [ 'p1', 'p2' ]
});

log(some.package2.Test.create());

// When used from another class, packaged classes can be required:

foam.CLASS({
  name: 'Client',
  requires: [ 'some.package2.Test' ],
  methods: [
    function createTest() { return this.Test.create(); }
  ]
});

log(Client.create().createTest());

##  FOAM Types
What are all of the types in FOAM?
Answer:
In FOAM, "types" are just sub-classes of foam.core.Property.
Most of the types in FOAM are defined in foam/core/types.js.
Types are not hard-coded into FOAM and you can create your own by extending Property.
The following script will find all of the FOAM "types":
--
for ( var v in foam.USED ) { try { if ( foam.core.Property.isSubClass(foam.lookup(v, true)) ) log(v); } catch(x) {} }
for ( var v in foam.UNUSED ) { try { if ( foam.core.Property.isSubClass(foam.lookup(v, true)) ) log(v); } catch(x) {} }

##  Flags
What does this code mean? e.g., flags: [&#39;java&#39;], flags[&#39;web&#39;] , flags: [ &#39;node&#39; ]
<br>
<br>
<b>A:</b> Some FOAM models are intended only for specific platforms, and the flags feature
determines when and where a model will be loaded or ignored.
For example, view specific models are only needed when loaded in a web browser,
so they can be configured with <code>flags: ['web']</code>.
Other code may only be useful when run in node.js <code>flags: ['node']</code>, for java <code>flags: ['java']</code>,
or swift, <code>flags: ['swift']</code>. When <code>flags: ['debug']</code> is present, the model is only
loaded when in debug mode (which is the default).
<br>
In your HTML file, you can customize the flags by setting FOAM_FLAGS before loading foam:
<pre>
  &lt;script>FOAM_FLAGS = {debug: false};&lt;/script>
  &lt;script language="javascript" src="../../../foam.js">&lt;/script>
</pre>
The set of flags isn't fixed, and you can make up your own for your own purposes.

##  References
How do I use References?
<br>
<br>
A Reference is a type of property which stores the primary key of a record
stored in a DAO.
<br>
To create a Reference property, set its class: 'Reference', and then set the of: property to be the model
of the referenced class, and daoKey: to be the context key of the referenced DAO.
<br>
Relationships with cardinality: '1:*' will add a Reference property to the target model.
--

foam.CLASS({
  name: 'Province',

  properties: [ 'id', 'name' ],

  methods: [
    function toSummary() { return this.name; }
  ]
});

foam.CLASS({
  name: 'ReferenceTest',

  requires: [
    'foam.dao.EasyDAO',
    'foam.u2.view.ReferenceView'
   ],

  properties: [
    {
      name: 'provinceDAO',
      hidden: true,
      factory: function() {
        return this.EasyDAO.create({
          of: Province,
          daoType: 'MDAO',
          testData: [
            { id: 'ON', name: 'Ontario' },
            { id: 'PQ', name: 'Quebec' },
            { id: 'NS', name: 'Nova Scotia' },
            { id: 'NB', name: 'New Brunswick' },
            { id: 'PE', name: 'Prince Edward Island' }
            // that's enough for demo purposes
          ]
        });
      }
    },
    {
      class: 'Reference',
      name: 'province1',
      of: 'Province',
      targetDAOKey: 'provinceDAO'

      // Without specifying the view:, this property will use a ReferenceView
      // which displays the result of calling the toSummary() method
      // for each object from the DAO.
    },
    {
      class: 'Reference',
      of: 'Province',
      name: 'province2',
      targetDAOKey: 'provinceDAO',
      view: { class: 'foam.u2.view.ReferenceView', objToChoice: function(obj) { return [obj.id, obj.id + ' ' + obj.name]; } }
      // In this case, we want to change what's displayed in the ReferenceView,
      // so we explicitly set the view: and then override objToChoice: to
      // also include the province id.
    }
  ]
});
add('output');
var rt = ReferenceTest.create({province1: 'ON', province2: 'PQ'});
add(rt);

// Each reference property has an associated $dao property
// which returns the referenced DAO.
add('select: ').start().style({'margin-left': '12px'}).select(rt.province1$dao, function(p) {
  return this.E().add(p.name);
}).end().br();

// Each reference property has an associated $find property
// which returns a promise which will lookup the referenced
// object from its DAO.

rt.province1$find.then(function(p) {
  add('find province1: ', p.name);
});

rt.province2$find.then(function(p) {
  add('find province2: ', p.name);
});

// We can also, just add promises to U2 directly?
add('find: ').add(rt.province1$find);

##  Slot.clear()
What does Slot.clear() do?
<br><br>
<b>A.</b> Calling slot.clear() is the same as setting the assocated property to <code>undefined</code> or calling clearProperty() on the owning object.
In all three cases, it reverts the property to its initial value.
The initial value will be either the default value of the property, as defined by either value:, factory: or expression:.
--
foam.CLASS({
  name: 'Test',
  properties: [
    {
      name: 'noDefault',
    },
    {
      name: 'defaultValue',
      value: 42
    },
    {
      name: 'defaultFactory',
      factory: function() { return this.defaultValue*10; }
    },
    {
      name: 'defaultExpression',
      expression: function(defaultValue, defaultFactory) {
        return defaultValue + defaultFactory;
      }
    }
  ]
});

var t = Test.create();
log('' + t.noDefault, ' ', t.defaultValue, ' ', t.defaultFactory, ' ', t.defaultExpression);

t.noDefault = 1;
t.defaultValue = 2;
t.defaultFactory = 3;
t.defaultExpression = 4;
log('' + t.noDefault, ' ', t.defaultValue, ' ', t.defaultFactory, ' ', t.defaultExpression);

t.noDefault = undefined;
t.clearProperty('defaultValue');
t.defaultFactory$.clear();
log('' + t.noDefault, ' ', t.defaultValue, ' ', t.defaultFactory, ' ', t.defaultExpression);

##  Property Cloning
From the code below, is it just cloning the value of property? They are not pointing to the same property after copying values?
<br><br>
<b>A.</b> It isn't cloning the property, just copying the property value whenever it changes.
It's the same as if we did:
// copy p2's name to p1's name whenever p2.name's value changes
p2.name$.sub(function() { p1.name = p2.name; });

--
foam.CLASS({name: 'Person', properties: [ 'name' ]});

p1 = Person.create();
p2 = Person.create({name:'John'});
log('Initial:', p1.name, ' ', p2.name);

p1.name$.follow(p2.name$);
log('After follow:', p1.name, ' ', p2.name);

p2.name = 'Janet';
log('After update:', p1.name, ' ', p2.name);

// Notice that in the above example, the binding is 1-way.
// If I change p1, p2 isn't affect:
p1.name = 'Kevin';
log('After update:', p1.name, ' ', p2.name);

// If I wanted to make it a 2-way data-binding, I could do:
// p1.name$.linkFrom(p2.name$)
// or just:
// p1.name$ = p2.name$;
// Ex.

p1 = Person.create();
p2 = Person.create({name:'John'});

p1.name$ = p2.name$;

log('After link:', p1.name, ' ', p2.name);

p1.name = 'Steve';
log('After Update p1:', p1.name, ' ', p2.name);

p2.name = 'Samantha';
log('After Update p2:', p1.name, ' ', p2.name);

##  Literal Views
What does it mean when I get this error: Use of literal View as ViewSpec: foam.u2.someView?
<br><br><b>A.</b>
It means that you've add an actual View object to another View instead of adding a ViewSpec.
A ViewSpec is a specification for creating a view, but not yet an actual View.
U2 relies on ViewSpecs instead of just using Views directly, for two reasons:
<ol>
<li>When creating the View from a ViewSpec, it can be certain that the View is created in the proper sub-context.
This will ensure that it has access to any values exported by parent views or services.
<li>Some parent views, like the StackView, may need to recreate the view more than once, which they can easily do from a ViewSpec.
<ol>
--
foam.CLASS({
  name: 'Test',
  extends: 'foam.u2.Element',

  requires: [ 'foam.u2.ControllerMode', 'foam.u2.view.StringView' ],

  methods: [
    function render() {
      this.startContext({controllerMode: this.ControllerMode.VIEW}).
        // works, but generates a warning
        add('literal: ').tag(this.StringView.create({data: 'value1'})).
        br().
        // works without a warning
        add('viewSpec: ').tag(this.StringView, {data: 'value2'}).
      endContext();
    }
  ]
});

add(Test.create());

##  Property Value Precedence
What method of determining a property's value takes precedence?
<br><br><b>A.</b> The order of precedence is:
<ol>
 <li>the value returned by <code>getter:</code>, if specified
 <li>the value the property has been set to, if it has been set, ex. <code>t.p2 = 2;</code>
 <li>the value returned by the <code>factory:</code>, if specified
 <li>the value returned by the <code>expression:</code>, if specified
 <li>the value specified by <code>value:</code>, if specified
 <li>undefined
</ol>

--
foam.CLASS({
  name: 'Test',

  properties: [
    { name: 'value', value: 4 },
    {
      name: 'p1',
      getter: function() { return 1; },
      factory: function() { return 3; },
      expression: function(value) { return value; },
      value: 5
    },
    {
      name: 'p2',
      factory: function() { return 3; },
      expression: function(value) { return value; },
      value: 5
    },
    {
      name: 'p3',
      factory: function() { return 3; },
      expression: function(value) { return value; },
      value: 5
    },
    {
      name: 'p4',
      expression: function(value) { return value; },
      value: 5
    },
    {
      name: 'p5',
      value: 5
    },
    {
      name: 'p6'
    }
  ]
});

var t = Test.create({p1: 2, p2: 2});
log(`p1: ${t.p1}, p2: ${t.p2}, p3: ${t.p3}, p4: ${t.p4}, p5: ${t.p5}, p6: ${t.p6}`);

##  Mutation not allowed
Q. What does "Mutation is not allowed in output state" mean and how do I fix it?
<p>
A1. In U2, Elements have a lifecycle which goes from INITIAL -> OUTPUT -> LOADED -> UNLOADED.
When an element is OUTPUT but not yet LOADED, it can't be modified, and if it is, then the
"Mutation is not allowed in output state." error will occur. U2 is careful to always LOAD elements
immediately after outputting them, so the way this normally happens is that an element throws
an exception when being loaded (in its render() method). To solve this problem add a try-catch block
to your offending element and see if it is throwing an unexpected exception.
<p>
A2. U3, U2's replacement, does away with states and this error is not possible.
--

##  Remote Listener Support
Q. What is remote listener support?
<p>
A. The JS EasyDAO has a boolean property called remoteListenerSupport which defaults to false.
When set to false, the client DAO communicates with the server over the HTTPBox, which communicates requests and responses
over the HTTP protocol.
When set to true, the client DAO communicates with the server over the WebSocket protocol. WebSockets have the advantage
that they're persistent connections, unlike HTTP, which is only temporary. The persistent nature of the WebSocket protocol
enables the Client DAO to propagate DAO update events back to the client, something that can't be done over HTTP.
DAO's normally generate update events when their data is mutated, this lets views know that the data has changed and that
they should refresh. If however data is updated on the server by a different user, without remoteListenerSupport enabled,
clients won't know to update.
WebSocket connections are more expensive to support, so are rarely used.
--

##  Enum Values
Q. How does “values” work in the code below and what's the difference of between “properties” and “values"?
<p>
foam.ENUM() creates an enumeration, not a regular class. The same as the following code
which is both valid C and Java:

enum DayOfWeek
{
   Sunday,
   Monday,
   Tuesday,
   Wednesday,
   Thursday,
   Friday,
   Saturday
};

Unlike classes, you can't create new instances of enums, every instance is already
pre-created and stored as a constant on the enum. Ex.: DayOfWeek.MONDAY, DayOfWeek.TUESDAY...

Because there is only one instance of each enum value (they're essentially singletons),
you can compare equality with == in Java.


--
foam.ENUM({
 name: 'DayOfWeek',
 values: [
  'Sunday',
  'Monday',
  'Tuesday',
  'Wednesday',
  'Thursday',
  'Friday',
  'Saturday'
 ]
});

var e = DayOfWeek.MONDAY;
log(e.name + ' ' + e.label + ' ' + e.ordinal + ' ' + e.toString());
log(DayOfWeek.forOrdinal(3).name);
for ( var day of DayOfWeek.VALUES ) {
  log(day.ordinal + " " + day.name);
}

log(DayOfWeek.isInstance(DayOfWeek.MONDAY));
log(DayOfWeek.isInstance('Sunday'));


##  Element.start()
Q. What are the arguments to “Element.start()“?

--

// If no arguments are provided, a DIV tag is created:
add(E().start().add("I'm in a div.").end());

// Use a String to specify an HTML tag name
add(E().start('b').add('bold').end());

// Use a ViewSpec to specify a U2View
add(E().start({class: 'foam.u2.TextField'}).end());

// Let's create our own view:
foam.CLASS({
  name: 'MyView',
  extends: 'foam.u2.View',

  methods: [
    function render() {
      this.add('MyView, myData: ', this.data$);
    }
  ]
});


// Let's use the second argument to specify the data:
add(E().start({class: 'MyView'}, {data: 'data1'}).end());

// This also works:
add(E().start({class: 'MyView', data: 'data2'}).end());

// This also also works:
add(E().start(MyView, {data: 'data3'}).end());

// You can also use a function:
var randomTag = function() { return Math.random() < 0.5 ? 'b' : 'i'; };

for ( var i = 0 ; i < 5 ; i++ )
  add(E().start(randomTag).add('bold or italic').end());

// It can also be a slot, but this option is being removed in U3

// It can also be any object that has a toE() method.
add(foam.util.Timer.create());

// But the most common cases of objects that implement toE() are
// Properties and Actions. Ex.:

foam.CLASS({
  name: 'PropertyAndAction',
  extends: 'foam.u2.Controller',
  properties: [ { class: 'Int', name: 'count' } ],
  actions: [ { name: 'plusOne', code: function() { this.count++; } } ],
  methods: [ function render() { this.start(this.COUNT).end().start(this.PLUS_ONE).end(); } ]
});

add(PropertyAndAction.create());

// In the above example, this.add(this.COUNT, this.PLUS_ONE) would also have worked.

// The third argument, if provided, is a slot which is set the the Element
// that is eventually created as a result of this start(). This is used if
// you want to store the sub-view in a variable for later reference.

// Ex.: start('div', {}, this.sidePanel$)

// Keep in mind that .tag() is the same as .start().end(), so the following are equivalent:
add(E().start('input').end());
add(E().tag('input'));

##  Element.callIf()
Q. When to use Element.callIf()?
<p>
A. call, callIf, callIfElse, and forEach are defined in foam.core.Fluent, and
are used for creating "fluent interfaces". This is where methods can be chained
without ever storing intermediate values in variables. U2/U3 are fluent interfaces.
Ex.:
--
add(E().start('div')
  .style({border: '2px solid red', background: 'pink'})
  .on('click', function() { log('click') })
  .start('b').add('bold text').end()
  .br()
  .start('i').add('italic text').end()
  .start('blockquote')
    .add('inside')
    .start('blockquote')
      .style({background: 'white'})
      .add('in inside')
    .end()
  .end()
.end());

// notice that despite many different elements being created, none were ever
// stored in variables, and instead the whole structure was created in one
// chained statement, with each method returning the appropriate object to
// continue the composition.

// So, callIf(), and the other Fluent methods, provide a convenient way of having
// 'if' statements without having to break out of the fluent interface.

// Consider:

function sign(isHoliday) {
  add(E().tag('hr').start()
    .start('b').add('Acme Widget Store').end()
    .callIf(isHoliday, function() {
      this.br().start('b').add("Sorry, we're closed today!").end();
    })
  .end());
}

sign(true);
sign(false);

##  init() and initE()
Q. What's the difference of using between initE() and init()?
<p>
Since this question was asked, initE() has been renamed to render().
<p>
The method init() is defined on FObject, so is shared by all FOAM JS Objects.
It is called whenever an object is created.
The method render() is defined on foam.u2.Element, the base class for all U2
components. 'E' is short for 'Element'. It is called just before a U2 element
is added to the DOM, which happens after init().
<p>
In U3, render has been renamed to render(), to make its purpose clearer.
<p>
In U2, Borders need to use init() instead of render(), but in U3 both Borders
and regular views should use the render method.
--

foam.CLASS({
  name: 'Test',
  methods: [
    function init() { log('init called on ' + this.cls_.name); },
    function render() { this.add('element'); log('render called on ' + this.cls_.name); },
  ]
});

foam.CLASS({
  name: 'TestElement',
  extends: 'foam.u2.Element',
  methods: [
    function init() { log('init called on ' + this.cls_.name); },
    function render() { this.add('element'); log('render called on ' + this.cls_.name); }
  ]
});

var test = Test.create();
var testE = TestElement.create();

log('both objects created');
add(testE);

##  Service client:
Q. How should I understand the two “client:” configurations below?
<pre>
1.
“client”:“”"
 {
  “class”: “foam.nanos.export.ClientGoogleSheetsExportService”,
  “delegate”:
   {
    “class”: “foam.box.HTTPBox”,
    “url”: “service/googleSheetsDataExport”
   }
 }
“”"

2.
“client”:“{\“of\“: \“foam.nanos.auth.GroupPermissionJunction\“}”
</pre>

A. For the first example, it's useful to look at the code for ClientGoogleSheetsExportService:

<pre>
foam.CLASS({
  package: 'foam.nanos.export',
  name: 'ClientGoogleSheetsExportService',

  implements: [
    'foam.nanos.export.GoogleSheetsExport'
  ],

  properties: [
    {
      class: 'Stub',
      of: 'foam.nanos.export.GoogleSheetsExport',
      name: 'delegate'
    }
  ]
});
</pre>

This class is what's called a 'Client Stub'. It implements the foam.nanos.export.GoogleSheetsExport interface
but it does so by converting any method calls on that interface into Box network calls.
The Box message will then be sent across the network to handled by the 'Server Skeleton'.
The Skeleton does the reverse and converts the Box message network call into a local method
call against the service that it's representing. The skeleton is registered at 'service/googleSheetsDataExport', which
is specified in the code above.
<p>
Stubs and Skeletons give the allusion that services are local, even when they're remote by
abstracting away the network interface.
<p>
If on the client you use the userDAO, then underneath every call is converted to a network call.
But if you use the menuDAO, the data is cached locally, and no network call will be made.
But in either case, your client code is the same: you just use the DAO interface without knowing
if the ultimate request is being served locally, remotely, or through a combination of local and
remote services.
<p>
2. The second example doesn't supply the 'class' of the Stub, because this service implements
the DAO interface, which is the default, so class defaults to foa.dao.ClientDAO in this case.

##  Slot Types
Q. What are the differences between and when to use: Slot Vs. Simple slot Vs. Expression slot?
<p>
A. For review, recall that a Slot is an object with three main methods:
<pre>
  void set(value) - set the Slot's value
  Object get() - get the Slot's value
  sub(listener) - subscribe to be notified when the value changes
<pre>
The most common type of Slot in FOAM is a PropertySlot, which is accessed when you
suffix the '$' character to a property name.
<p>
Ex.:
--
foam.CLASS({
  name: 'Person',
  properties: [
    'firstName',
    'lastName'
  ]
});

var p1 = Person.create({firstName: 'Kevin', lastName: 'Greer'});
log(p1.firstName, p1.firstName$.cls_.name, p1.firstName$.get());

// now, I could update firstName directly:

p1.firstName = 'Logan';
log(p1.firstName);

// But I could also use the slot:
p1.firstName$.set('Mark');
log(p1.firstName);

// And I can subscribe to changes to firstName:
p1.firstName$.sub(function() {
  log('firstName change: ', p1.firstName);
});

// Which will be called if I update the property directly:
p1.firstName = 'Logan'

// Or through the slot:
p1.firstName$.set('Kevin');


// In the above example firstName$ is a PropertySlot, ie. a Slot bound to a Property value.

// However, if you ever need a Slot not bound to a Property, you can use a SimpleSlot:

var slot = foam.core.SimpleSlot.create({value: 'Tala'});
log(slot.get());
slot.set('Janet');
log(slot.get());

// Normally SimpleSlots are only used by FOAM internals, and as an application developer,
// you would rarely need to use them. Instead of using SimpleSlot's, you can just declare an extra
// property on your model and then access it as property$.

// PropertySlot's and SimpleSlot's only access one value, but an ExpressionSlot lets you combine
// multiple property values into a single Slot.

// Ex.:
var fullName = p1.slot(function(firstName, lastName) { return firstName + ' ' + lastName; });
log('fullName', fullName.get());

fullName.sub(function() {
  log('full name: ', fullName.get());
});

p1.firstName = 'John';
p1.lastName = 'Doe';

// Note that ExpressionSlots aren't set()-able:
fullName.set('Jane Smith');
log(fullName.get()); // Is still John Doe

##  Sink
What is the difference between ArraySink and AbstractSink and when to use?
Answer:
AbstractSink is an abstract base class for implementing the Sink interface.
ArraySink is one of the possible implementation of AbstractSink. ArraySink is the default Sink used if you don't explicitly provide a Sink to the DAO select() method.
The ArraySink has a property called 'array' which stores all values obtained from the select().

However, if you can just process each record in-line in the AbstractSink, then that's better because it won't allocate the memory for an array.
Also, you can start processing the records sooner, ie. when the first one is available, but with an ArraySink, you don't get to start until all of the data has been copied into the array.
Also, if you terminate the selection early, then you don't do any more work with an AbstractSink, but with ArraySink, you've already copied all of the data into the array.

ArraySink sink = (ArraySink) dao.select(new ArraySink());
or just:
ArraySink sink = (ArraySink) dao.select(new ArraySink());

for ( int i = 0; i < sink.getArray().size(); i++ ) {
  SomeObject obj = (SomeObject) sink.getArray().get(i);

  if ( obj.something() ) break;
}

vs.

dao. select(new AbstractSink() {
  public void put(Object o, Detachable d) {
    SomeObject obj = (SomeObject) o;
    if ( o.something() ) d.detach();
  }
});

In the above examples, the first case uses an ArraySink, while the second uses
an in-lined sub-class of AbstractSink. Both examples abort the select when
they find an object that meets some criteria, but the second AbstractSink is
more efficient because it aborts the select() early and doesn't have to process
the remaining objects, whereas the ArraySink has already select()-ed them and
copied them into the ArraySink array.

##  JavaExtras
What is javaExtras and how to use it?
Answer:
When you would want to add extra Java code to your generated java class, you can just add it with javaExtras.
For example:
axioms: [
  {
    name: 'javaExtras',
    buildJavaClass: function(cls) {
      cls.extras.push(foam.java.Code.create({
        data: `
          public CompoundException(String message) {
            super(message);
          }

          public CompoundException(String message, java.lang.Exception cause) {
            super(message, cause);
          }
          `
      }));
    }
  }
],

The following code, taken from CompoundException, is used to add two convenience constructors
to the generated CompoundException.java class. The above code makes use of FOAM's axiom support.
FOAM models are just collections of axioms. Everything that you think of as being a unique attribute
of a model, is just a different type of axiom. Properties, methods, actions, imports, exports, etc., are all
just axioms. Each axiom has methods for build its part into the generated Javascript class and prototype or Java or Swift code.
For Javascript installInProto() and installInClass() are used, and for Java, buildJavaClass is used.
Besides the provided axioms types provided by FOAM, you can always write your own, which is what the above code is doing.
It's just creating custom axiom to add a bit of code to the java class. It's naming it 'javaExtras', by convention, but it
could have named it anything.

Custom axioms are used for things which aren't typically used enough to warrant adding a first-class axiom type to the FOAM core.
However, if we check how many times the above pattern is used in the foam codebase:

$ find ./ -name "*.js" -exec grep javaExtras \{} \; | wc -l
110

We see that it's used 110 times, which is enough to warrant promotion to first-class built-in status.

The above code is a bit ugly, so let's add this as a built-in feature to FOAM by refining model:

// First create a class for java code:

foam.CLASS({
  package: 'foam.java',
  name: 'JavaCode',

  documentation: `
    Axiom for adding java code to a model.
    The supplied code will be added to the generated .java code generated for the model.
  `,

  properties: [
    'name',
    'code'
  ],

  methods: [
    function buildJavaClass(cls) {
      cls.extras.push(foam.java.Code.create({data: this.code}));
    }
  ]
});

Now we could do:

axioms: [ foam.java.JavaCode.create({name: 'constructors', code: `
public CompoundException(String message) {
  super(message);
}

public CompoundException(String message, java.lang.Exception cause) {
  super(message, cause);
}

`})],

Which is better, but we could do better still by refining foam.core.Model to add
a javaCode property.

foam.CLASS({
  refines: 'foam.core.Model',
  package: 'foam.java',
  name: 'JavaCodeModelRefine',

  requires: [ 'foam.java.JavaCode' ],

  properties: [
    {
      class: 'String',
      name: 'javaCode',
      postSet: function(_, code) {
        this.axioms_.push(this.JavaCode.create({
          name: 'JavaCode_' + this.name,
          code: code
        }));
      }
    }
  ]
});

Now we can just do:

javaCode: `
  public CompoundException(String message) {
    super(message);
  }

  public CompoundException(String message, java.lang.Exception cause) {
    super(message, cause);
  }
`

Which is much nicer than the original.

The above improvement has been added to FOAM:

commit d2e4f11a323e8afc6c176a513215745083c5f4d6
Author: Kevin Greer <kgrgreer@gmail.com>
Date:  Tue Oct 19 11:34:04 2021 -0400
  Convert from javaExtras custom Axiom to javaCode:.


##  Journals type
What is the difference between runtime journals(e.g. UserCapabilityJunctions) and static journals( e.g. UserCapabilityJunctions.0). Also, journals end with .jrl. How do we differentiate those?

Answer:
Static journals are the initial configuration that the system is shipped with when when it is built, and is creating by combining the .jrl files found in the source code repository. Static journals end with the .0 extension.
Runtime journals contain data that is created (or modified or deleted) by the system one it is deployed.
The state of the system is determined by starting with the static journals and then applying the changes listed in the runtime journals.

## Axioms
Q.
When should I use axioms with javaExtras?
</br>
Answer:
Anything you can define on a model is defined as an axiom of that model.
Better reading of axioms here https://github.com/kgrgreer/foam3/blob/5ceaacfa6abf370cfb08f31cc7c24fc2f44197fe/src/foam/core/Boot.js#L79
Axioms include methods, properties, listeners, refines, imports, javaExtras …
<br>
From above link “Axioms can be added either during the initial creation of a class and prototype, or anytime after.“
Which implies that there is no notable difference in the model definitions.
If you define an axiom_ in a model for javaExtra or
if you add an axiom_ to axioms on the model and then define the javaExtra’s there - you are doing the samething.
The build will instantiate the model then proceed to build it up.
<br></br>

## Freezable
Q.
“Freeze” meaning we don’t want to modify an object? Why do we need this function?
Example 1)
  public void beforeFreeze() {
    getStatus();
    getServerDaoKey();
    getAdditionalGroups();
  }
<br>
Example 2)
  public foam.core.FObject freeze() {
    beforeFreeze();
    __frozen__ = true;
    return this;
  }
<br></br>
Answer:
The idea behind freezing objects is for the concept of maintaining consistent data in our data structures- primarily in foam DAOs.
We want to save the original object once it is in the DAO and only modify it through another DAO put.
Without freezable, a service could still have access to an object and save some modification of an object in a DAO.
So yes, a frozen object means that no modifications to this object are suppose to happen.
<br>
We implement this idea with an interface Freezable that is implemented on all FObjects.
The default implementation of beforeFreeze() is a noop function. https://github.com/kgrgreer/foam3/blob/5ceaacfa6abf370cfb08f31cc7c24fc2f44197fe/src/foam/core/FObject.java#L414
Then have a refinement here https://github.com/kgrgreer/foam3/blob/5ceaacfa6abf370cfb08f31cc7c24fc2f44197fe/src/foam/java/refinements.js#L552
</br>
So the idea behind beforeFreeze is that if an object needs to do something before the object is frozen, it can.
In the example 1, we see an implementation definition from the refinement.
The properties that are being called are javaFactoryProperties.
A factory on a property has many uses to instantiate a model with some predefined value.
A javaFactory is specific to the java model, and a factory to a client js model.
So we ensure that the property is called, to ensure that the default code - written in the javaFactory - for this property is run.
If we didn’t run default javeFactory code and the property was never set, then the object is not complete
and its predefined values would be ignored - virtually breaking javaFactory on all properties.
<br>
In example 2 you have the default behaviour setting for the freeze function of any FObject that is built on server(java).
Defined https://github.com/kgrgreer/foam3/blob/5ceaacfa6abf370cfb08f31cc7c24fc2f44197fe/src/foam/java/refinements.js#L600
which is what is building the java Object code.
=======
##  NSpec Service Initialization
I don’t understand exactly when to use the properties like “service” vs “serviceClass” vs “serviceScript”. What are the differences between those?

Answer:
When creating NSpec services, there are three methods for defining the service. The methods are attempted in the following order:
1. service - if the service property is set, it is an FObject which is the actual service.
Ex.:
"service":{
  "class":"foam.nanos.jetty.HttpServer",
  "port":8080
}
In the above example, the foam.nanos.jetty.HttpServer service is modelled and can be just created and configured in-line.
This does not work for non-modelled services.

An advantage of this method is that if edited through the GUI, a DetailView for the service will be embedded in the NSpec GUI
allowing for this service to be easily configured.

2. serviceClass
If the class of the service is known and it doesn't require any configuration, then you can just provide the serviceClass.
Ex.:
"serviceClass":"foam.nanos.http.NanoRouter"

Unlike with the HttpServer example above, the NanoRouter does not require any configuration, so it is okay to just provide the class name.
Note that doing:
"service":{
  "class":"foam.nanos.http.NanoRouter"
}
wouldn't work in this case because NanoRouter isn't modelled and therefore isn't an FObject. This is because in needs to extend the Java HttpServlet class.

3. serviceScript
The third method is to provide a script which creates and initializes the services.
Ex.:
"serviceScript": """
  auth = new foam.nanos.auth.UserAndGroupAuthService(x);
  auth = new foam.nanos.auth.EnabledCheckAuthService.Builder(x)
    .setDelegate(auth)
    .build();
  auth = new foam.nanos.auth.PasswordExpiryAuthService.Builder(x)
    .setDelegate(auth)
    .build();
  auth = new foam.nanos.auth.twofactor.TwoFactorAuthService.Builder(x)
    .setDelegate(auth)
    .build();
  auth = new foam.nanos.auth.ResetSpidBeforeLoginAuthService.Builder(x)
    .setDelegate(auth)
    .build();
  auth = new foam.nanos.auth.CachingAuthService(auth);
  auth = new foam.nanos.auth.PMAuthService.Builder(x)
    .setLabel("uncached")
    .setDelegate(auth)
    .build();
  auth = new foam.nanos.auth.SystemAuthService.Builder(x)
    .setDelegate(auth)
    .build();
  return auth;
""",

This method is suitable when you need to create multiple composed objects all of which need to be configured.
You can even check the AppConfig status and use it to create deployment specific configurations.

The default language for the serviceScript is BeanShell, a Java-like interpreted language, but you can change
the scripting language to JSHELL, which provides real compiled Java. Do do this, include:
"language":2
in your service config (or select JSHELL if configuring from the GUI).

##  Local DAO VS Non-Local DAO
What is the difference between userDAO VS localUserDAO?

Answer:
Not only does userDAO have localUserDAO, but most of our DAOs also have a local version of it.
For example, there are accountDAO/localAccountdao, transactionDAO/localTransactionDAO and many others.
These are not different databases. They all point to the same journals, and in the example below,
non-local DAO is just an extension of a local one.

Example 1:
p({
  "class":"foam.nanos.boot.NSpec",
  "name":"userDAO",
  "serve":true,
  "serviceScript":"""
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setInnerDAO(x.get("localUserDAO"))
      .setOf(foam.nanos.auth.User.getOwnClassInfo())
      .setPermissioned(true)

If you see .setInnerDAO(x.get("localUserDAO")), it means that when an object goes through
all decorators in userDAO, it will be passed to the localUserDAO and only then stored
in the journals. The main difference between the local and extended versions is that
the extended one(non-local) is served to the client and is more secure.

Served to the client( "serve":true) means that you can import userDAO in your view and
do operations on it, but you will never find localUserDAO in our js file because it is not
accessible from the frontend. If a service is not served("serve":false) then you will not
be able to use it on the client side. Please see an example below(ViewSubmittedProfileView.js).

Example 2:
imports: [
    'businessTypeDAO',
    'questionnaireDAO',
    'stack',
    'user',
    'userDAO'
  ],

This view imports userDAO, and then, later on, it does self.userDAO.put(self.user);.
So this userDAO is the EasyDAO definition that is called "userDAO" because it is served,
we can use it in a view(client) but if you change userDAO to localUserDAO in that view,
you will break it.

On EasyDAO, it's managed by setting "serve":true while on localUserDAO we will have "serve":false.
And because of that, we need to make it more secure, so on the userDAO you will find decorators
like AuthenticateDAO and AuthorizationDAO etc - those will check whether you have access to
the user database or not while localUserDAO is less concerned with authorization and
it does more logic related to the user model itself.

The name "local" comes from it being accessed only "locally" - from the server.
So if you are working on the server(if you are writing code in java) and you know that your user
is already fully authorized or your user is a system user(who we fully trust),
you can call directly x.get("localUserDAO") - that would skip many authorization logics
which would increase time in general of whatever you are doing.
