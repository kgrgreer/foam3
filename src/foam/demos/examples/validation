## Validation2
--

## AssertValue
The simplest form of validation is to specify an assertValue property on a property.
The assertValue function receives the old and new values of the property and if
it throws an exception the new value is refused. Asserts do not provide GUI validation
because they aren't externally visible as the object never actually transitions to
the invalid value. Rarely used in FOAM, mostly just for model-level validation.
--
foam.CLASS({
  name: 'Test',
  properties: [
    {
      class: 'String',
      name: 'p1',
      assertValue: function(value, prop) {
        // This property is passed as the second argument, so assertValue's can
        // be defined in base classes and still refer to the correct property name
        if ( ! value || value.length < 10 ) throw prop.name + ' must be at least 10 characters.'
      }
    },
    {
      class: 'Int',
      name: 'age',
      assertValue: function(age) {
        if ( age < 0 )        throw 'Age must be at least 0.';
        if ( age > 130 )      throw 'Age must be no more than 130.';
        if ( age < this.age ) throw 'Age can not go backwards.';
      }
    }
    /*
    {
      class: 'Int',
      name: 'age',
      minValue: 0,
      maValue: 130
    },
    {
      class: 'String',
      name: 'password',
      required: true,
      minLength: 5
    }*/
  ]
});

var t = Test.create();

try { t.p1 = 'too short'; } catch (x) { log(x); }
log(t.p1);
t.p1 = 'not too short';
log(t.p1);

try { t.age = -1; } catch (x) { log(x); }
log(t.age);
try { t.age = 5; } catch (x) { log(x); }
log(t.age);
try { t.age = 4; } catch (x) { log(x); }
log(t.age);
try { t.age = 10; } catch (x) { log(x); }
log(t.age);
try { t.age = 200; } catch (x) { log(x); }
log(t.age);

## ValidateObj
Limitations of assertValue are that it isn't suitable for GUI validation and that it only lets you perform validations involving a single value.
To overcome these limitations we have validateObj which doesn't block setting the property to an incorrect value,
it just reports the value as being incorrect. This makes binding to a GUI easier, as it allows the user
to type in intermediate values which are not yet correct. For example, for a string with a minimum length
of five characters, the user could still type in "1", "12", "123", "1234" on the way to typing in the
correct value of "12345".
validateObj also allows for validations that require multiple property values. For example that someones date of death is after their date of birth.
All errors returned from validateObj methods are stored in errors_. This approach is used rather than throwing
an exception because it allows for the reporting of multiple errors, rather than just one at a time.
The slot errors_$ can be subscribed to to be informed of a change to an object's validity.
--
foam.CLASS({
  name: 'Flight',
  properties: [
    {
      class: 'String',
      name: 'passengerName',
      required: true,
      minLength: 5,
      maxLength: 20
    },
    {
      class: 'EMail',
      name: 'email',
      required: true
    },
    {
      class: 'Int',
      name: 'age',
      min: 0,
      max: 130
    },
    {
      class: 'Boolean',
      name: 'returnFlight'
    },
    {
      class: 'Date',
      name: 'departureDate',
      required: true
    },
    {
      class: 'Date',
      name: 'returnDate',
      validateObj: function(returnFlight, departureDate, returnDate) {
        if ( returnFlight && ! returnDate ) return 'Return date required for return flights.';
        if ( ! returnFlight && returnDate ) return "Return date can't be specified for non return flights.";
        if ( foam.Date.compare(returnDate, departureDate) < 0 ) return "Can't return before you depart.";
      }
    }
  ]
});

var f = Flight.create();

function errorsToString(errors) {
  return errors ? errors.map(e => `[${e[0].name}, ${e[1]}]`).join(', ') : 'no errors';
}

add(foam.u2.detail.SectionedDetailView.create({data: f}));
// add(foam.u2.DetailView.create({data: f}));

f.errors_$.dedup().sub(() => {
  log('Sub:', errorsToString(f.errors_));
});

function validateFlight() {
  if ( f.errors_ ) {
    log('Errors: ', errorsToString(f.errors_));
  } else {
    log('No Errors');
  }
}

f.departureDate = new Date('2025/04/14');
validateFlight();

log();
log('Validation 1');
f.passengerName = 'John Doe';
validateFlight();

log();
log('Validation 2');
f.email = 'john@doe.com';
validateFlight();

log();
log('Validation 3');
f.returnFlight = true;
validateFlight();

log();
log('Validation 4');
f.returnDate = new Date('2025/04/13');
validateFlight();

log();
log('Validation 5');
f.returnDate = new Date('2025/04/15');
validateFlight();

## Type Validation
While validateObj could be used for all JS validations, there are many standard
types of validations which are just built-in to the standard FOAM Property types
to avoid repetative coding.
Some Property validations are implied by the Property type itself. For example, types like EMail or PhoneNumber
ensure that the data is in a valid format for that type.
Additionally, some Property types have additional properties like min:, max:, minLength: and maxLength:
which can be specified to add extra constrains.
--
foam.CLASS({
  name: 'PropertyValidationTest',

  properties: [
    { class: 'String',      name: 'required', required: true },
    { class: 'String',      name: 'minLength', minLength: 3 },
    { class: 'String',      name: 'maxLength', maxLength: 5 },
    { class: 'String',      name: 'minMaxLength', minLength: 3, maxLength: 5 },
    { class: 'Int',         name: 'min', min: 1 },
    { class: 'Int',         name: 'max', max: 10 },
    { class: 'Int',         name: 'minMax', min: 1, max: 10 },
    { class: 'Int',         name: 'odd', validateObj: function(odd) { if ( odd % 2 == 0 ) return 'Number should be odd.'; } },
    { class: 'Int',         name: 'minMaxOdd', min: 1, max: 10, validateObj: function(minMaxOdd) { if ( minMaxOdd % 2 == 0 ) return 'Number should be odd.'; } },
    { class: 'String',      name: 'evenLengthRequired', required: true, validateObj: function(evenLengthRequired) { if ( evenLengthRequired.length % 2 ) return 'Length should be even.'; } },
    { class: 'Date',        name: 'date' },
    { class: 'DateTime',    name: 'dateTime' },
    { class: 'Time',        name: 'time' },
    { class: 'Byte',        name: 'byte' },
    { class: 'Short',       name: 'short' },
    { class: 'EMail',       name: 'email' },
    { class: 'PhoneNumber', name: 'phoneNumber' },
    { class: 'URL',         name: 'url' },
    { class: 'Website',     name: 'website' }
]
});
var t = PropertyValidationTest.create();
add(foam.u2.detail.SectionedDetailView.create({data: t}));
// add(foam.u2.DetailView.create({data: t}));

## Validation Errors in GUI
Property and validateObj validations can be seen in the GUI:
--
var f = Flight.create();
add(foam.u2.detail.SectionedDetailView.create({data: f}));
add(foam.u2.DetailView.create({data: f}));

## ValidationPredicates
The problem with with validateObj is that it is JS specific. To provide the same validation for Java, you would need to also supply java validation code with
the javaValidateObj property (and with the swiftValidateObj property for Swift).
Validation Predicates provide a cross-language methor for specifying validation constraints. Constrains are specified with the FScript language.
The implementations of FScript can be found in foam.parse.FScriptParser.(js|java).
More than one validationPredicate can be specified per Property.
A validationPredicate needs a query:, which specifies the FScript predicate which must return true for a valid object, and either errorString: to specify
a literal String message in case the predicate fails, or else the name of an i18n message with errorMessage:.  The use of errorMessage: instead of errorString:
makes i18n easier.

--
foam.CLASS({
  name: 'ValidationPredicatesTest',
  messages: [
    { name: 'AGE_LIMIT', message: 'Age must be between 18 and 25 (internationalized).' }
  ],
  properties: [
    {
      class: 'Int',
      name: 'age1',
      validationPredicates: [
        {
          query: 'age1>=18&&age1<=25',
          errorString: 'Age must be between 18 and 25.'
        }
      ]
    },
    {
      class: 'Int',
      name: 'age2',
      validationPredicates: [
        {
          query: 'age2>=18&&age2<=25',
          errorMessage: 'AGE_LIMIT'
        }
      ]
    },
    {
      class: 'Int',
      name: 'age3',
      validationPredicates: [
        {
          // Instead of revering to the property name directly, 'age3' in this case,
          // we can access this properties value as 'thisValue'.
          query: 'thisValue>=18&&thisValue<=25',
          errorString: 'Age must be between 18 and 25.'
        }
      ]
    },
    {
      class: 'Int',
      name: 'small'
    },
    {
      class: 'Int',
      name: 'large',
      // combines Property constraints and validationPredicates
      min: 1,
      max: 10,
      validationPredicates: [
        {
          query: 'large>small',
          errorString: 'Large must be larger than small.'
        }
      ]
    }
  ]
});
var d = ValidationPredicatesTest.create();
add(foam.u2.detail.SectionedDetailView.create({data: d}));
// add(foam.u2.DetailView.create({data: d}));


## Combining Validation Methods
All three types of validations: Property constraints, validateObj, and validationPredicates can be combined in a single Property
--
foam.CLASS({
  name: 'CombinedTest',

  properties: [
    { class: 'Int',    name: 'odd', validateObj: function(odd) { if ( odd % 2 == 0 ) return 'Number should be odd.'; } },
    { class: 'Int',    name: 'minMaxOdd', min: 1, max: 10, validateObj: function(minMaxOdd) { if ( minMaxOdd % 2 == 0 ) return 'Min Max Odd should be odd.'; } },
    { class: 'String', name: 'evenLengthRequired', required: true, validateObj: function(evenLengthRequired) { if ( evenLengthRequired.length % 2 ) return 'Length should be even.'; } },
    {
      class: 'Int',
      name: 'value',
      required: true,
      max: 10,
      validateObj: function(value) {
        if ( value == 5 ) return 'Value must not be 5.';
      },
      validationPredicates: [
        {
          query: 'value>1',
          errorString: 'Value must be greater than 1.'
        },
        {
          query: 'value!=4',
          errorString: 'Value must not be 4.'
        }
      ]
    }
  ]
});
var t = CombinedTest.create();
add(foam.u2.detail.SectionedDetailView.create({data: t}));
// add(foam.u2.DetailView.create({data: t}));

## Nested Validation
Validation errors from nested FObjects can propagate up if the autoValidate: property
of FObjectProperty is set to true.
--
foam.CLASS({
  name: 'NestedTest',

  properties: [
    {
      class: 'FObjectProperty',
      name: 'noAutoValidation',
      of: 'CombinedTest'
    },
    {
      class: 'FObjectProperty',
      name: 'autoValidation',
      of: 'CombinedTest',
      autoValidate: true
    }
  ]
});

var t = NestedTest.create();
// add(foam.u2.detail.SectionedDetailView.create({data: t}));
add(foam.u2.DetailView.create({data: t}));
function errorsToString(errors) {
  return errors ? errors.map(e => `[${e[0].name}, ${e[1]}]`).join(', ') : 'no errors';
}
t.errors_$.dedup().sub(() => {
  console.log('Nested: ', t.errors_ || 'no errors');
  log('Nested:', errorsToString(t.errors_ || 'no errors'));
});
t.errors_;
