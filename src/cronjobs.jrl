p({
  "class": "foam.nanos.cron.Cron",
  "schedule": {
    "class": "foam.nanos.cron.CronSchedule",
    "minute": 0,
    "hour": -1,
    "dayOfMonth": -1,
    "month": -1,
    "dayOfWeek": -1,
    "second": 0
  },
  "scheduledTime": "2019-09-09T17:00:00.000Z",
  "id": "Renew rule history cron",
  "description": "Cron for renewing rule history - run every hour.",
  "code":
  """
    import foam.nanos.ruler.cron.RenewRuleHistoryCron;
    cron = new RenewRuleHistoryCron();
    cron.execute(x);
    print("done");
  """
})
p({
  "class":"foam.nanos.cron.Cron",
  "id":"CleanupTempFileCron",
  "description":"Cron to clean up files which exist more than 4 hours",
  schedule:{
    class:"foam.nanos.cron.CronSchedule",
    minute: 0,
    hour: -1,
    dayOfMonth:-1,
    month:-1,
    dayOfWeek:-1,
    second: -1
  },
  "code": """
    import foam.core.X;
    import foam.dao.DAO;
    import foam.mlang.MLang;
    import foam.nanos.fs.TempFile;
    import java.time.LocalDateTime;
    import java.time.ZoneId;
    import java.util.Date;

    final int TTL = 4;

    DAO tempFileDAO = (DAO) x.get("tempFileDAO");

    Date threshold = Date.from(LocalDateTime.now().minusHours(TTL).atZone(ZoneId.systemDefault()).toInstant());

    tempFileDAO
      .where(MLang.LT(TempFile.CREATED, threshold))
      .removeAll();
  """,
  "enabled":false
})
